(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"0aUR":function(e,t,a){"use strict";a.r(t),t.default="import { Component, OnInit } from '@angular/core';\nimport { BaseModel } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent implements OnInit {\n  public modelConfigs = { highlightOnValid: true };\n  public exampleModel: BaseModel = new BaseModel(ExampleDto, {\n    configs: this.modelConfigs,\n  });\n  public output: string;\n  public isValid: boolean;\n\n  private sampleData: ExampleDto = {\n    email: 'test@mail.com',\n    city: 2,\n    favoriteFoods: [3, 1],\n  };\n\n  public cities = [\n    { value: 1, viewValue: 'Bogot\xe1' },\n    { value: 2, viewValue: 'Medell\xedn' },\n    { value: 3, viewValue: 'Cartagena' },\n    { value: 4, viewValue: 'Santander' },\n  ];\n\n  public favoriteFoods = [\n    { value: 1, viewValue: 'Pizza' },\n    { value: 2, viewValue: 'Ice cream' },\n    { value: 3, viewValue: 'Hamburger' },\n    { value: 4, viewValue: 'Hot dog' },\n  ];\n\n  ngOnInit(): void {\n    this.exampleModel.onEnterPress(() => this.submit());\n  }\n\n  public populate(): void {\n    this.isValid = undefined;\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  public clear(): void {\n    this.isValid = undefined;\n    this.exampleModel.reset();\n  }\n\n  public submit(): void {\n    this.exampleModel.validate().then((validationResult) => {\n      const { isValid, errors, validatedData } = validationResult;\n      this.isValid = isValid;\n\n      if (isValid) {\n        //Send the data to backend\n        this.output = JSON.stringify(validatedData, null, 2);\n      } else {\n        //(Optional) write your logic when data is invalid\n        this.output = JSON.stringify(errors, null, 2);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.exampleModel.unbindOnEnterPress();\n  }\n}\n"},L4Dr:function(e,t,a){"use strict";a.r(t),t.default='<div>\n  <bs-input\n    [model]="exampleModel"\n    label="Email"\n    name="email"\n    placeholder="example@mail.com"\n  ></bs-input>\n  <bs-select2\n    [model]="exampleModel"\n    placeholder="Select one city"\n    label="City"\n    name="city"\n    [options]="cities"\n  ></bs-select2>\n  <bs-select\n    [model]="exampleModel"\n    placeholder="Select at least one food"\n    label="Favorite foods"\n    name="favoriteFoods"\n    [options]="favoriteFoods"\n    [multiple]="true"\n  ></bs-select>\n  <button class="btn btn-primary" (click)="submit()">Submit</button>\n  <button type="button" class="btn ml-3 btn-secondary" (click)="populate()">\n    Populate\n  </button>\n  <button type="button" class="btn ml-3 btn-info" (click)="clear()">\n    Clear\n  </button>\n</div>\n<div *ngIf="isValid === false" class="alert alert-danger mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n<div *ngIf="isValid === true" class="alert alert-success mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n'},SRiM:function(e,t,a){"use strict";a.r(t),t.default="import { Component } from '@angular/core';\nimport { BaseModel } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent {\n  public exampleModel: BaseModel = new BaseModel(ExampleDto);\n  public output: string;\n  public isValid: boolean;\n\n  private sampleData: ExampleDto = {\n    email: 'test@mail.com',\n    city: 2,\n    favoriteFoods: [3, 1],\n  };\n\n  public cities = [\n    { value: 1, viewValue: 'Bogot\xe1' },\n    { value: 2, viewValue: 'Medell\xedn' },\n    { value: 3, viewValue: 'Cartagena' },\n    { value: 4, viewValue: 'Santander' },\n  ];\n\n  public favoriteFoods = [\n    { value: 1, viewValue: 'Pizza' },\n    { value: 2, viewValue: 'Ice cream' },\n    { value: 3, viewValue: 'Hamburger' },\n    { value: 4, viewValue: 'Hot dog' },\n  ];\n\n  public populate(): void {\n    this.isValid = undefined;\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  public clear(): void {\n    this.isValid = undefined;\n    this.exampleModel.reset();\n  }\n\n  public submit(event): void {\n    event.then((validationResult) => {\n      const { isValid, errors, validatedData } = validationResult;\n      this.isValid = isValid;\n\n      if (isValid) {\n        //Send the data to backend\n        this.output = JSON.stringify(validatedData, null, 2);\n      } else {\n        //(Optional) write your logic when data is invalid\n        this.output = JSON.stringify(errors, null, 2);\n      }\n    });\n  }\n}\n"},cylb:function(e,t,a){"use strict";a.r(t),t.default="import {\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  ArrayMinSize,\n} from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  city: number;\n\n  @IsNumber({}, { each: true })\n  @ArrayMinSize(1)\n  @IsArray()\n  favoriteFoods: number[];\n}\n"},u6tm:function(e,t,a){"use strict";a.r(t),t.default='<data-groups\n  (submitEvent)="submit($event)"\n  [model]="exampleModel"\n  [highlightOnValid]="true"\n>\n  <data-group>\n    <bs-input\n      #dataInput\n      label="Email"\n      name="email"\n      placeholder="example@mail.com"\n    ></bs-input>\n    <bs-select\n      #dataInput\n      placeholder="Select one city"\n      label="City"\n      name="city"\n      [options]="cities"\n    ></bs-select>\n    <bs-select\n      #dataInput\n      placeholder="Select at least one food"\n      label="Favorite foods"\n      name="favoriteFoods"\n      [options]="favoriteFoods"\n      [multiple]="true"\n    ></bs-select>\n  </data-group>\n  <button class="btn btn-primary">Submit</button>\n  <button type="button" class="btn ml-3 btn-secondary" (click)="populate()">\n    Populate\n  </button>\n  <button type="button" class="btn ml-3 btn-info" (click)="clear()">\n    Clear\n  </button>\n</data-groups>\n<div *ngIf="isValid === false" class="alert alert-danger mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n<div *ngIf="isValid === true" class="alert alert-success mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n'},uIF6:function(e,t,a){"use strict";a.r(t),t.default="import {\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  ArrayMinSize,\n} from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  city: number;\n\n  @IsNumber({}, { each: true })\n  @ArrayMinSize(1)\n  @IsArray()\n  favoriteFoods: number[];\n}\n"},vA1R:function(e,t,a){"use strict";a.r(t),a.d(t,"IndexModule",(function(){return q}));var n=a("ofXK"),o=a("PCNd"),s=a("tyNb"),i=a("gtvE"),l=a("fXoL"),c=a("ABAs"),r=a("CB9U");let d=(()=>{class e extends i.a{constructor(){super(...arguments),this.callableProperties=[{name:"public isValid: boolean",description:"Show if the model's data is valid. By default is <code>false</code>"},{name:"public isSubmitted: boolean",description:"Show if the model's data has been submitted. By default is <code>false</code>"}],this.callableMethods=[{name:"public getDto(): any",description:"Get the current model's filled data."},{name:"public setValue(path: string, value: any): void",description:"Sets the value of the model's DTO attribute. The <code>path</code> is the model's DTO attribute and the <code>value</code> is the data with which will be filled."},{name:"public getValue(path: string): any",description:"Gets the value of the model's DTO attribute. The <code>path</code> is the model's DTO attribute."},{name:"public fill(data: any): void",description:"Fills the model's DTO with the provided data."},{name:"public validate(validatorOptions?: ValidatorOptions): Promise<ValidationResult>",description:"Validates all the model's DTO data."},{name:"public validateField(fieldName: string, validatorOptions?: ValidatorOptions): Promise<ValidationResult>",description:"Validates an specific attribute of the model's DTO data."},{name:"public reset(): void",description:"Clears all the model's DTO data."},{name:"public onEnterPress(callback: Function): void",description:"Subscribes to enter press event to trigger a callback function."},{name:"public unbindOnEnterPress(): void",description:"Unsubscribes from enter press listener."}]}}return e.\u0275fac=function(t){return b(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["app-api"]],features:[l.ub],decls:6,vars:2,consts:[[3,"data"]],template:function(e,t){1&e&&(l.Pb(0,"marker"),l.sc(1,"Callable Properties"),l.Ob(),l.Kb(2,"api-table",0),l.Pb(3,"marker"),l.sc(4,"Callable Methods"),l.Ob(),l.Kb(5,"api-table",0)),2&e&&(l.xb(2),l.bc("data",t.callableProperties),l.xb(3),l.bc("data",t.callableMethods))},directives:[c.a,r.a],encapsulation:2}),e})();const b=l.Rb(d);var u=a("NiOw"),p=a("FKbk");let m=(()=>{class e extends i.b{constructor(){super(...arguments),this.routes=[{title:"Overview",path:"overview"},{title:"Api",path:"api"}]}}return e.\u0275fac=function(t){return h(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["app-data-groups"]],features:[l.ub],decls:6,vars:2,consts:[[3,"markers"],[1,"mb-4"],[3,"routes"],[1,"pt-3"],[3,"activate"]],template:function(e,t){1&e&&(l.Pb(0,"app-docs-container",0),l.Pb(1,"h5",1),l.sc(2,"Base Model"),l.Ob(),l.Kb(3,"app-tabs",2),l.Pb(4,"div",3),l.Pb(5,"router-outlet",4),l.Wb("activate",(function(e){return t.onActivate(e)})),l.Ob(),l.Ob(),l.Ob()),2&e&&(l.bc("markers",t.markers),l.xb(3),l.bc("routes",t.routes))},directives:[u.a,p.a,s.e],encapsulation:2}),e})();const h=l.Rb(m);var v=a("KRIm"),f=a("oIZk"),g=a("uTO9"),O=a("mrSG"),y=a("hsmS"),P=a("6C12"),w=a("eB3s"),x=a("XJ2Q"),V=a("Sxtw");let I=(()=>{class e{}return Object(O.b)([Object(y.a)(),Object(P.a)()],e.prototype,"email",void 0),Object(O.b)([Object(w.a)(),Object(P.a)()],e.prototype,"city",void 0),Object(O.b)([Object(w.a)({},{each:!0}),Object(x.a)(1),Object(V.a)()],e.prototype,"favoriteFoods",void 0),e})();var M=a("c7wr"),k=a("mube"),D=a("VgVm"),C=a("TG4i"),S=a("OtPg");function E(e,t){if(1&e&&(l.Pb(0,"div",10),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",11),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}function B(e,t){if(1&e&&(l.Pb(0,"div",12),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",11),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}let F=(()=>{class e{constructor(){this.exampleModel=new g.a(I),this.sampleData={email:"test@mail.com",city:2,favoriteFoods:[3,1]},this.cities=[{value:1,viewValue:"Bogot\xe1"},{value:2,viewValue:"Medell\xedn"},{value:3,viewValue:"Cartagena"},{value:4,viewValue:"Santander"}],this.favoriteFoods=[{value:1,viewValue:"Pizza"},{value:2,viewValue:"Ice cream"},{value:3,viewValue:"Hamburger"},{value:4,viewValue:"Hot dog"}]}populate(){this.isValid=void 0,this.exampleModel.fill(this.sampleData)}clear(){this.isValid=void 0,this.exampleModel.reset()}submit(e){e.then(e=>{const{isValid:t,errors:a,validatedData:n}=e;this.isValid=t,this.output=t?JSON.stringify(n,null,2):JSON.stringify(a,null,2)})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["running-code"]],decls:16,vars:7,consts:[[3,"model","highlightOnValid","submitEvent"],["label","Email","name","email","placeholder","example@mail.com"],["dataInput",""],["placeholder","Select one city","label","City","name","city",3,"options"],["placeholder","Select at least one food","label","Favorite foods","name","favoriteFoods",3,"options","multiple"],[1,"btn","btn-primary"],["type","button",1,"btn","ml-3","btn-secondary",3,"click"],["type","button",1,"btn","ml-3","btn-info",3,"click"],["class","alert alert-danger mt-3",4,"ngIf"],["class","alert alert-success mt-3",4,"ngIf"],[1,"alert","alert-danger","mt-3"],[3,"highlight"],[1,"alert","alert-success","mt-3"]],template:function(e,t){1&e&&(l.Pb(0,"data-groups",0),l.Wb("submitEvent",(function(e){return t.submit(e)})),l.Pb(1,"data-group"),l.Kb(2,"bs-input",1,2),l.Kb(4,"bs-select",3,2),l.Kb(6,"bs-select",4,2),l.Ob(),l.Pb(8,"button",5),l.sc(9,"Submit"),l.Ob(),l.Pb(10,"button",6),l.Wb("click",(function(){return t.populate()})),l.sc(11," Populate "),l.Ob(),l.Pb(12,"button",7),l.Wb("click",(function(){return t.clear()})),l.sc(13," Clear "),l.Ob(),l.Ob(),l.qc(14,E,5,1,"div",8),l.qc(15,B,5,1,"div",9)),2&e&&(l.bc("model",t.exampleModel)("highlightOnValid",!0),l.xb(4),l.bc("options",t.cities),l.xb(2),l.bc("options",t.favoriteFoods)("multiple",!0),l.xb(8),l.bc("ngIf",!1===t.isValid),l.xb(1),l.bc("ngIf",!0===t.isValid))},directives:[M.a,k.a,D.a,C.a,n.j,S.b],encapsulation:2}),e})(),j=(()=>{class e{ngOnInit(){this.htmlCode=a("u6tm").default,this.componentCode=a("SRiM").default,this.dtoCode=a("uIF6").default}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["demo-overview-1"]],decls:83,vars:3,consts:[["type","running-code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"]],template:function(e,t){1&e&&(l.Pb(0,"marker"),l.sc(1,"Base Model with "),l.Pb(2,"code"),l.sc(3,"data-groups"),l.Ob(),l.Ob(),l.Pb(4,"code-example"),l.Pb(5,"code-block",0),l.Kb(6,"running-code"),l.Ob(),l.Pb(7,"code-block",1),l.Pb(8,"p"),l.sc(9," With the help of the "),l.Pb(10,"code"),l.sc(11,"data-groups"),l.Ob(),l.sc(12," component we can bind the "),l.Pb(13,"code"),l.sc(14,"BaseModel"),l.Ob(),l.sc(15," instance into each form UI component. Remember that the latter must extend from "),l.Pb(16,"code"),l.sc(17,"DataInputBase"),l.Ob(),l.sc(18," to take advantage of the "),l.Pb(19,"code"),l.sc(20,"BaseModel"),l.Ob(),l.sc(21," and must have the template variable "),l.Pb(22,"code"),l.sc(23,"#dataInput"),l.Ob(),l.sc(24," to make the model binding happens. "),l.Ob(),l.Pb(25,"p"),l.sc(26," Notice also that inside the "),l.Pb(27,"code"),l.sc(28,"data-groups"),l.Ob(),l.sc(29," selector, there must be a "),l.Pb(30,"code"),l.sc(31,"data-group"),l.Ob(),l.sc(32," component that wraps the form UI elements. This "),l.Pb(33,"code"),l.sc(34,"data-group"),l.Ob(),l.sc(35," selector will have more sense when we implement an instance of "),l.Pb(36,"code"),l.sc(37,"BaseModelArray"),l.Ob(),l.sc(38,". "),l.Ob(),l.Pb(39,"p"),l.sc(40," Also it's very important that each form UI element has a "),l.Pb(41,"code"),l.sc(42,"name"),l.Ob(),l.sc(43," attribute which it's value is the property registered on the model's DTO. "),l.Ob(),l.Pb(44,"p"),l.sc(45," Finally the "),l.Pb(46,"code"),l.sc(47,"data-groups"),l.Ob(),l.sc(48," selector wraps all our form UI elements into a native HTML "),l.Pb(49,"code"),l.sc(50,"form"),l.Ob(),l.sc(51," component. If you need to create a complex UI that is not a form but needs to pass, validate and submit data, take a look on to the "),l.Pb(52,"i"),l.sc(53,"Base Model without data-groups"),l.Ob(),l.sc(54," example. "),l.Ob(),l.Ob(),l.Pb(55,"code-block",2),l.Pb(56,"p"),l.sc(57," Here we can see the instance of the "),l.Pb(58,"code"),l.sc(59,"BaseModel"),l.Ob(),l.sc(60," initialized in the "),l.Pb(61,"code"),l.sc(62,"exampleModel"),l.Ob(),l.sc(63," property. It receives as parameter in the constructor the DTO class, which contains all the data attributes and validation rules. "),l.Ob(),l.Pb(64,"p"),l.sc(65," The "),l.Pb(66,"code"),l.sc(67,"BaseModel"),l.Ob(),l.sc(68," also provides us of useful methods to fill or clear our form UI with data. "),l.Ob(),l.Pb(69,"p"),l.sc(70," Finally, we can see how the submit action is handled thanks to the "),l.Pb(71,"code"),l.sc(72,"submitEvent"),l.Ob(),l.sc(73," from the "),l.Pb(74,"code"),l.sc(75,"data-groups"),l.Ob(),l.sc(76," component. It returns as event a promise that contains the validation status, errors and validated data ready to be send to the backend. "),l.Ob(),l.Ob(),l.Pb(77,"code-block",3),l.Pb(78,"p"),l.sc(79," On the DTO we find all the properties and validation rules to be loaded inside the "),l.Pb(80,"code"),l.sc(81,"BaseModel"),l.Ob(),l.sc(82," instance. "),l.Ob(),l.Ob(),l.Ob()),2&e&&(l.xb(7),l.bc("code",t.htmlCode),l.xb(48),l.bc("code",t.componentCode),l.xb(22),l.bc("code",t.dtoCode))},directives:[c.a,v.a,f.a,F],encapsulation:2}),e})(),T=(()=>{class e{}return Object(O.b)([Object(y.a)(),Object(P.a)()],e.prototype,"email",void 0),Object(O.b)([Object(w.a)(),Object(P.a)()],e.prototype,"city",void 0),Object(O.b)([Object(w.a)({},{each:!0}),Object(x.a)(1),Object(V.a)()],e.prototype,"favoriteFoods",void 0),e})();var N=a("o/Gt");function K(e,t){if(1&e&&(l.Pb(0,"div",8),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",9),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}function U(e,t){if(1&e&&(l.Pb(0,"div",10),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",9),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}let R=(()=>{class e{constructor(){this.modelConfigs={highlightOnValid:!0},this.exampleModel=new g.a(T,{configs:this.modelConfigs}),this.sampleData={email:"test@mail.com",city:2,favoriteFoods:[3,1]},this.cities=[{value:1,viewValue:"Bogot\xe1"},{value:2,viewValue:"Medell\xedn"},{value:3,viewValue:"Cartagena"},{value:4,viewValue:"Santander"}],this.favoriteFoods=[{value:1,viewValue:"Pizza"},{value:2,viewValue:"Ice cream"},{value:3,viewValue:"Hamburger"},{value:4,viewValue:"Hot dog"}]}ngOnInit(){this.exampleModel.onEnterPress(()=>this.submit())}populate(){this.isValid=void 0,this.exampleModel.fill(this.sampleData)}clear(){this.isValid=void 0,this.exampleModel.reset()}submit(){this.exampleModel.validate().then(e=>{const{isValid:t,errors:a,validatedData:n}=e;this.isValid=t,this.output=t?JSON.stringify(n,null,2):JSON.stringify(a,null,2)})}ngOnDestroy(){this.exampleModel.unbindOnEnterPress()}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["running-code"]],decls:12,vars:8,consts:[["label","Email","name","email","placeholder","example@mail.com",3,"model"],["placeholder","Select one city","label","City","name","city",3,"model","options"],["placeholder","Select at least one food","label","Favorite foods","name","favoriteFoods",3,"model","options","multiple"],[1,"btn","btn-primary",3,"click"],["type","button",1,"btn","ml-3","btn-secondary",3,"click"],["type","button",1,"btn","ml-3","btn-info",3,"click"],["class","alert alert-danger mt-3",4,"ngIf"],["class","alert alert-success mt-3",4,"ngIf"],[1,"alert","alert-danger","mt-3"],[3,"highlight"],[1,"alert","alert-success","mt-3"]],template:function(e,t){1&e&&(l.Pb(0,"div"),l.Kb(1,"bs-input",0),l.Kb(2,"bs-select2",1),l.Kb(3,"bs-select",2),l.Pb(4,"button",3),l.Wb("click",(function(){return t.submit()})),l.sc(5,"Submit"),l.Ob(),l.Pb(6,"button",4),l.Wb("click",(function(){return t.populate()})),l.sc(7," Populate "),l.Ob(),l.Pb(8,"button",5),l.Wb("click",(function(){return t.clear()})),l.sc(9," Clear "),l.Ob(),l.Ob(),l.qc(10,K,5,1,"div",6),l.qc(11,U,5,1,"div",7)),2&e&&(l.xb(1),l.bc("model",t.exampleModel),l.xb(1),l.bc("model",t.exampleModel)("options",t.cities),l.xb(1),l.bc("model",t.exampleModel)("options",t.favoriteFoods)("multiple",!0),l.xb(7),l.bc("ngIf",!1===t.isValid),l.xb(1),l.bc("ngIf",!0===t.isValid))},directives:[D.a,N.a,C.a,n.j,S.b],encapsulation:2}),e})(),A=(()=>{class e{ngOnInit(){this.htmlCode=a("L4Dr").default,this.componentCode=a("0aUR").default,this.dtoCode=a("cylb").default}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["demo-overview-2"]],decls:70,vars:3,consts:[["type","running-code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"]],template:function(e,t){1&e&&(l.Pb(0,"marker"),l.sc(1,"Base Model without "),l.Pb(2,"code"),l.sc(3,"data-groups"),l.Ob(),l.Ob(),l.Pb(4,"code-example"),l.Pb(5,"code-block",0),l.Kb(6,"running-code"),l.Ob(),l.Pb(7,"code-block",1),l.Pb(8,"p"),l.sc(9," On this example, we are not using the "),l.Pb(10,"code"),l.sc(11,"data-groups"),l.Ob(),l.sc(12," and "),l.Pb(13,"code"),l.sc(14,"data-group"),l.Ob(),l.sc(15," components. Instead of passing the "),l.Pb(16,"code"),l.sc(17,"BaseModel"),l.Ob(),l.sc(18," instance as property of the "),l.Pb(19,"code"),l.sc(20,"data-groups"),l.Ob(),l.sc(21," component, now the model must be passed as property of each form UI component. "),l.Ob(),l.Pb(22,"p"),l.sc(23," This way of using the "),l.Pb(24,"code"),l.sc(25,"BaseModel"),l.Ob(),l.sc(26," without "),l.Pb(27,"code"),l.sc(28,"data-groups"),l.Ob(),l.sc(29,", will let us to build more complex UI that need to pass, validate and submit data. "),l.Ob(),l.Ob(),l.Pb(30,"code-block",2),l.Pb(31,"p"),l.sc(32," Due to we lost the "),l.Pb(33,"code"),l.sc(34,"form"),l.Ob(),l.sc(35," native HTML component that wraps all the form UI components, now we need to subscribe to the model's event "),l.Pb(36,"code"),l.sc(37,"onEnterPress"),l.Ob(),l.sc(38," and pass as argument a "),l.Pb(39,"code"),l.sc(40,"submit"),l.Ob(),l.sc(41," event. With this all the form UI elements, bind to the "),l.Pb(42,"code"),l.sc(43,"BaseModel"),l.Ob(),l.sc(44," instance, will trigger the submit event when the "),l.Pb(45,"code"),l.sc(46,"Enter"),l.Ob(),l.sc(47," key is pressed, recovering the same behavior of a form without being a form. "),l.Ob(),l.Pb(48,"p"),l.sc(49," Also we need to code the "),l.Pb(50,"code"),l.sc(51,"submit"),l.Ob(),l.sc(52," method a little bit different: now we need to validate the model on the submit process. It will return again a promise of type "),l.Pb(53,"code"),l.sc(54,"ValidationResult"),l.Ob(),l.sc(55," that contains the validation status, errors and validated data ready to be send to the backend. "),l.Ob(),l.Pb(56,"p"),l.sc(57," Finally it's very important to unsubscribe from the "),l.Pb(58,"code"),l.sc(59,"onEnterPress"),l.Ob(),l.sc(60," event on the "),l.Pb(61,"code"),l.sc(62,"ngDestroy"),l.Ob(),l.sc(63," component's lifecycle to prevent a multiple subscription when the "),l.Pb(64,"code"),l.sc(65,"Enter"),l.Ob(),l.sc(66," key is pressed. "),l.Ob(),l.Ob(),l.Pb(67,"code-block",3),l.Pb(68,"p"),l.sc(69,"The DTO remains the same as the past example."),l.Ob(),l.Ob(),l.Ob()),2&e&&(l.xb(7),l.bc("code",t.htmlCode),l.xb(23),l.bc("code",t.componentCode),l.xb(37),l.bc("code",t.dtoCode))},directives:[c.a,v.a,f.a,R],encapsulation:2}),e})(),H=(()=>{class e extends i.a{}return e.\u0275fac=function(t){return z(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["app-overview"]],features:[l.ub],decls:32,vars:0,consts:[["href","/docs/bootstrap/setup","target","blank"]],template:function(e,t){1&e&&(l.Pb(0,"p"),l.sc(1," The "),l.Pb(2,"code"),l.sc(3,"BaseModel"),l.Ob(),l.sc(4," class is where is defined all the data model that will receive a form UI or complex UI component that manage data and needs to validate it. A "),l.Pb(5,"code"),l.sc(6,"BaseModel"),l.Ob(),l.sc(7," instance can be injected only on components that have extended from the "),l.Pb(8,"code"),l.sc(9,"DataInputBase"),l.Ob(),l.sc(10," class. Main responsibilities of this class are to validate, fill and clear data from an UI component. "),l.Ob(),l.Pb(11,"p"),l.sc(12," A "),l.Pb(13,"code"),l.sc(14,"BaseModel"),l.Ob(),l.sc(15," instance can be used inside a "),l.Pb(16,"code"),l.sc(17,"data-groups"),l.Ob(),l.sc(18," component or independently. This second way is preferred if we are going to use a more complex UI that manage data that is not properly a form. "),l.Ob(),l.Pb(19,"p"),l.sc(20," For this examples, we are going to use the "),l.Pb(21,"a",0),l.sc(22,"Bootstrap 4.x Form Components"),l.Ob(),l.sc(23,". These extends from the "),l.Pb(24,"code"),l.sc(25,"DataInputBase"),l.Ob(),l.sc(26," class, making them compatible with the "),l.Pb(27,"code"),l.sc(28,"BaseModel"),l.Ob(),l.sc(29," instances. "),l.Ob(),l.Kb(30,"demo-overview-1"),l.Kb(31,"demo-overview-2"))},directives:[j,A],encapsulation:2}),e})();const z=l.Rb(H),J=[{path:"",redirectTo:"overview",pathMatch:"full"},{path:"",component:m,children:[{path:"overview",component:H},{path:"api",component:d}]}];let G=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[s.d.forChild(J)],s.d]}),e})(),W=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[o.a]]}),e})(),L=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[o.a]]}),e})(),q=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[n.b,o.a,G,W,L]]}),e})()}}]);