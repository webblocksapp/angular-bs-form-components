(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{"32+9":function(e,t,n){"use strict";n.r(t),t.default="import { Component, OnInit } from '@angular/core';\nimport { BaseModelArray } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent implements OnInit {\n  public modelConfigs = { highlightOnValid: true };\n  public exampleModel: BaseModelArray = new BaseModelArray(ExampleDto, {\n    configs: this.modelConfigs,\n  });\n  public output: string;\n  public isValid: boolean;\n  public maxNumberOfRecords: number = 3;\n  public Array = Array;\n\n  private sampleData: ExampleDto[] = [\n    {\n      email: 'test@gmail.com',\n      city: 2,\n      favoriteFoods: [3, 1],\n    },\n    {\n      email: 'test@outlook.com',\n      city: 4,\n      favoriteFoods: [2, 4],\n    },\n    {\n      email: 'test@hotmail.com',\n      city: 1,\n      favoriteFoods: [1, 5],\n    },\n  ];\n\n  ngOnInit(): void {\n    this.exampleModel.onEnterPress(() => this.submit());\n  }\n\n  public cities = [\n    { value: 1, viewValue: 'Bogot\xe1' },\n    { value: 2, viewValue: 'Medell\xedn' },\n    { value: 3, viewValue: 'Cartagena' },\n    { value: 4, viewValue: 'Santander' },\n  ];\n\n  public favoriteFoods = [\n    { value: 1, viewValue: 'Pizza' },\n    { value: 2, viewValue: 'Ice cream' },\n    { value: 3, viewValue: 'Hamburger' },\n    { value: 4, viewValue: 'Hot dog' },\n  ];\n\n  public addRecord(): void {\n    this.exampleModel.add();\n  }\n\n  public deleteRecord(index: number): void {\n    this.exampleModel.delete(index);\n  }\n\n  public populate(): void {\n    this.isValid = undefined;\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  public clear(index?: number): void {\n    this.isValid = undefined;\n    this.exampleModel.reset(index);\n  }\n\n  public update(index?: number): void {\n    this.exampleModel.find(index).fill(this.sampleData[index]);\n  }\n\n  public submit(): void {\n    this.exampleModel.validate().then((validationResult) => {\n      const { isValid, errors, validatedData } = validationResult;\n      this.isValid = isValid;\n\n      if (isValid) {\n        //Send the data to backend\n        this.output = JSON.stringify(validatedData, null, 2);\n      } else {\n        //(Optional) write your logic when data is invalid\n        this.output = JSON.stringify(errors, null, 2);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.exampleModel.unbindOnEnterPress();\n  }\n}\n"},"4kjb":function(e,t,n){"use strict";n.r(t),n.d(t,"IndexModule",(function(){return X}));var a=n("ofXK"),o=n("PCNd"),i=n("tyNb"),s=n("gtvE"),l=n("fXoL"),c=n("ABAs"),d=n("CB9U");let r=(()=>{class e extends s.a{constructor(){super(...arguments),this.callableProperties=[{name:"public isValid: boolean",description:"Show if the model's data is valid. By default is <code>false</code>"},{name:"public length: number",description:"The <code>BaseModelArray</code> length"},{name:"public minLength: number",description:"The min length of empty models to start by default the <code>BaseModelArray</code>"},{name:"public maxLength: number",description:"The max length of models that can be stored inside the <code>BaseModelArray</code>"}],this.callableMethods=[{name:"public constructor(DtoClass: any, args?: BaseModelArgs)",description:"Initializes the <code>BaseModelArray</code>."},{name:"public fill(data: Array&lt;any&gt, reset: boolean = true): void",description:"Fills the <code>BaseModelArray</code> with the passed data. If the reset argument is set to <code>false</code>, the array of models will be updated with the passed data."},{name:"public isFilled(index?: number): boolean",description:"Checks if the <code>BaseModelArray</code> is filled. By passing the <code>index</code> you can check if an specific model is filled."},{name:"public get(): Array&lt;BaseModel&gt;",description:"Gets the array of <code>BaseModel</code> instances."},{name:"public getDtos(): Array&lt;any&gt;",description:"Gets the array of the <code>dtos</code> from each model."},{name:"public find(index: number): BaseModel",description:"Get a model inside the <code>BaseModelArray</code> instance."},{name:"public add(data: any = null): void",description:"Appends a new <code>BaseModel</code> instance inside the <code>BaseModelArray</code>. It can be added with preloaded data."},{name:"public delete(index: number): void",description:"Deletes a <code>BaseModel</code> instance from the <code>BaseModelArray</code>."},{name:"public reset(index?: number, all: boolean = true): void",description:"Resets the <code>BaseModelArray</code> to its original state. If <code>all</code> is set to <code>false</code>, it will ignore the set <code>minLength</code>."},{name:"public validate(validatorOptions?: ValidatorOptions, index?: number): Promise&lt;ValidationResult&gt;",description:"Validates the <code>BaseModelArray</code>. Pass the <code>index</code> argument to validate a specific <code>BaseModel</code> instance inside the array."},{name:"public onEnterPress(callback: Function): void",description:"Subscribes to enter key press event. Must be implemented the model's <code>detectPressEnter</code> method inside a component that extends from <code>DataInputBase</code>."},{name:"public unbindOnEnterPress(): void",description:"Unsubscribes from enter key press event. Commonly implemented when the component is unmounted."}]}}return e.\u0275fac=function(t){return b(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["app-api"]],features:[l.ub],decls:6,vars:2,consts:[[3,"data"]],template:function(e,t){1&e&&(l.Pb(0,"marker"),l.sc(1,"Callable Properties"),l.Ob(),l.Kb(2,"api-table",0),l.Pb(3,"marker"),l.sc(4,"Callable Methods"),l.Ob(),l.Kb(5,"api-table",0)),2&e&&(l.xb(2),l.bc("data",t.callableProperties),l.xb(3),l.bc("data",t.callableMethods))},directives:[c.a,d.a],encapsulation:2}),e})();const b=l.Rb(r);var u=n("NiOw"),p=n("FKbk");let m=(()=>{class e extends s.b{constructor(){super(...arguments),this.routes=[{title:"Overview",path:"overview"},{title:"Api",path:"api"}]}}return e.\u0275fac=function(t){return h(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["app-data-groups"]],features:[l.ub],decls:6,vars:2,consts:[[3,"markers"],[1,"mb-4"],[3,"routes"],[1,"pt-3"],[3,"activate"]],template:function(e,t){1&e&&(l.Pb(0,"app-docs-container",0),l.Pb(1,"h5",1),l.sc(2,"Base Model Array"),l.Ob(),l.Kb(3,"app-tabs",2),l.Pb(4,"div",3),l.Pb(5,"router-outlet",4),l.Wb("activate",(function(e){return t.onActivate(e)})),l.Ob(),l.Ob(),l.Ob()),2&e&&(l.bc("markers",t.markers),l.xb(3),l.bc("routes",t.routes))},directives:[u.a,p.a,i.e],encapsulation:2}),e})();const h=l.Rb(m);var f=n("KRIm"),v=n("oIZk"),g=n("uTO9"),y=n("mrSG"),O=n("hsmS"),x=n("6C12"),P=n("eB3s"),w=n("XJ2Q"),M=n("Sxtw");let k=(()=>{class e{}return Object(y.b)([Object(O.a)(),Object(x.a)()],e.prototype,"email",void 0),Object(y.b)([Object(P.a)(),Object(x.a)()],e.prototype,"city",void 0),Object(y.b)([Object(P.a)({},{each:!0}),Object(w.a)(1),Object(M.a)()],e.prototype,"favoriteFoods",void 0),e})();var I=n("c7wr"),V=n("mube"),A=n("VgVm"),B=n("TG4i"),C=n("OtPg");function F(e,t){if(1&e){const e=l.Qb();l.Pb(0,"button",21),l.Wb("click",(function(){l.lc(e);const t=l.Yb().index;return l.Yb().deleteRecord(t)})),l.Kb(1,"i",22),l.Ob()}}function R(e,t){if(1&e){const e=l.Qb();l.Pb(0,"data-group",10),l.Pb(1,"div",11),l.Pb(2,"div",12),l.Pb(3,"span"),l.Pb(4,"b"),l.sc(5),l.Ob(),l.Ob(),l.qc(6,F,2,0,"button",13),l.Ob(),l.Kb(7,"bs-input",14,15),l.Kb(9,"bs-select",16,15),l.Kb(11,"bs-select",17,15),l.Pb(13,"div",18),l.Pb(14,"button",19),l.Wb("click",(function(){l.lc(e);const n=t.index;return l.Yb().clear(n)})),l.sc(15," Clear "),l.Ob(),l.Pb(16,"button",20),l.Wb("click",(function(){l.lc(e);const n=t.index;return l.Yb().update(n)})),l.sc(17," Update "),l.Ob(),l.Ob(),l.Ob(),l.Ob()}if(2&e){const e=t.index,n=l.Yb();l.xb(5),l.uc("Record ",e+1,""),l.xb(1),l.bc("ngIf",n.exampleModel.length>1),l.xb(3),l.bc("options",n.cities),l.xb(2),l.bc("options",n.favoriteFoods)("multiple",!0)}}function D(e,t){if(1&e&&(l.Pb(0,"div",23),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",24),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}function E(e,t){if(1&e&&(l.Pb(0,"div",25),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",24),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}let N=(()=>{class e{constructor(){this.exampleModel=new g.b(k),this.maxNumberOfRecords=3,this.Array=Array,this.sampleData=[{email:"test@gmail.com",city:2,favoriteFoods:[3,1]},{email:"test@outlook.com",city:4,favoriteFoods:[2,4]},{email:"test@hotmail.com",city:1,favoriteFoods:[1,5]}],this.cities=[{value:1,viewValue:"Bogot\xe1"},{value:2,viewValue:"Medell\xedn"},{value:3,viewValue:"Cartagena"},{value:4,viewValue:"Santander"}],this.favoriteFoods=[{value:1,viewValue:"Pizza"},{value:2,viewValue:"Ice cream"},{value:3,viewValue:"Hamburger"},{value:4,viewValue:"Hot dog"}]}addRecord(){this.exampleModel.add()}deleteRecord(e){this.exampleModel.delete(e)}populate(){this.isValid=void 0,this.exampleModel.fill(this.sampleData)}clear(e){this.isValid=void 0,this.exampleModel.reset(e)}update(e){this.exampleModel.find(e).fill(this.sampleData[e])}submit(e){e.then(e=>{const{isValid:t,errors:n,validatedData:a}=e;this.isValid=t,this.output=t?JSON.stringify(a,null,2):JSON.stringify(n,null,2)})}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["running-code"]],decls:17,vars:8,consts:[[3,"model","highlightOnValid","submitEvent"],[1,"d-flex","align-items-center","mb-3"],["type","button",1,"btn","btn-secondary",3,"disabled","click"],[1,"ml-2"],["class","card mb-3",4,"ngFor","ngForOf"],[1,"btn","btn-primary"],["type","button",1,"btn","ml-3","btn-secondary",3,"click"],["type","button",1,"btn","ml-3","btn-info",3,"click"],["class","alert alert-danger mt-3",4,"ngIf"],["class","alert alert-success mt-3",4,"ngIf"],[1,"card","mb-3"],[1,"card-body"],[1,"card-title","d-flex","justify-content-between"],["type","button","class","btn btn-danger",3,"click",4,"ngIf"],["label","Email","name","email","placeholder","example@mail.com"],["dataInput",""],["placeholder","Select one city","label","City","name","city",3,"options"],["placeholder","Select at least one food","label","Favorite foods","name","favoriteFoods",3,"options","multiple"],[1,"mt-3"],["type","button",1,"btn","btn-secondary",3,"click"],["type","button",1,"btn","btn-secondary","ml-3",3,"click"],["type","button",1,"btn","btn-danger",3,"click"],[1,"fa","fa-times"],[1,"alert","alert-danger","mt-3"],[3,"highlight"],[1,"alert","alert-success","mt-3"]],template:function(e,t){1&e&&(l.Pb(0,"data-groups",0),l.Wb("submitEvent",(function(e){return t.submit(e)})),l.Pb(1,"div",1),l.Pb(2,"button",2),l.Wb("click",(function(){return t.addRecord()})),l.sc(3," Add record "),l.Ob(),l.Pb(4,"span",3),l.sc(5),l.Pb(6,"b"),l.sc(7),l.Ob(),l.Ob(),l.Ob(),l.qc(8,R,18,5,"data-group",4),l.Pb(9,"button",5),l.sc(10,"Submit"),l.Ob(),l.Pb(11,"button",6),l.Wb("click",(function(){return t.populate()})),l.sc(12," Populate "),l.Ob(),l.Pb(13,"button",7),l.Wb("click",(function(){return t.clear()})),l.sc(14," Clear "),l.Ob(),l.Ob(),l.qc(15,D,5,1,"div",8),l.qc(16,E,5,1,"div",9)),2&e&&(l.bc("model",t.exampleModel)("highlightOnValid",!0),l.xb(2),l.bc("disabled",t.exampleModel.length>=t.maxNumberOfRecords),l.xb(3),l.uc(" ",t.exampleModel.length," of "),l.xb(2),l.tc(t.maxNumberOfRecords),l.xb(1),l.bc("ngForOf",t.Array(t.exampleModel.length)),l.xb(7),l.bc("ngIf",!1===t.isValid),l.xb(1),l.bc("ngIf",!0===t.isValid))},directives:[I.a,a.i,a.j,V.a,A.a,B.a,C.b],encapsulation:2}),e})(),j=(()=>{class e{ngOnInit(){this.htmlCode=n("o5fg").default,this.componentCode=n("vo4Z").default,this.dtoCode=n("R+Oj").default}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["demo-overview-1"]],decls:86,vars:3,consts:[["type","running-code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"]],template:function(e,t){1&e&&(l.Pb(0,"marker"),l.sc(1,"Base Model Array with "),l.Pb(2,"code"),l.sc(3,"data-groups"),l.Ob(),l.Ob(),l.Pb(4,"code-example"),l.Pb(5,"code-block",0),l.Kb(6,"running-code"),l.Ob(),l.Pb(7,"code-block",1),l.Pb(8,"p"),l.sc(9," With the help of the "),l.Pb(10,"code"),l.sc(11,"data-groups"),l.Ob(),l.sc(12," component we can bind the "),l.Pb(13,"code"),l.sc(14,"BaseModelArray"),l.Ob(),l.sc(15," instance into each form UI component. Remember that the latter must extend from "),l.Pb(16,"code"),l.sc(17,"DataInputBase"),l.Ob(),l.sc(18," to take advantage of the "),l.Pb(19,"code"),l.sc(20,"BaseModelArray"),l.Ob(),l.sc(21," and must have the template variable "),l.Pb(22,"code"),l.sc(23,"#dataInput"),l.Ob(),l.sc(24," to make the model binding happens. "),l.Ob(),l.Pb(25,"p"),l.sc(26," Notice also that inside the "),l.Pb(27,"code"),l.sc(28,"data-groups"),l.Ob(),l.sc(29," selector, there must be a "),l.Pb(30,"code"),l.sc(31,"data-group"),l.Ob(),l.sc(32," component that wraps the form UI elements. Here the "),l.Pb(33,"code"),l.sc(34,"data-group"),l.Ob(),l.sc(35," will have an "),l.Pb(36,"code"),l.sc(37,"*ngFor"),l.Ob(),l.sc(38," to iterate the models inside the "),l.Pb(39,"code"),l.sc(40,"BaseModelArray"),l.Ob(),l.sc(41," instance. "),l.Ob(),l.Pb(42,"p"),l.sc(43," Also it's very important that each form UI element has a "),l.Pb(44,"code"),l.sc(45,"name"),l.Ob(),l.sc(46," attribute which it's value is the property registered on the model's DTO. "),l.Ob(),l.Pb(47,"p"),l.sc(48," Finally the "),l.Pb(49,"code"),l.sc(50,"data-groups"),l.Ob(),l.sc(51," selector wraps all our form UI elements into a native HTML "),l.Pb(52,"code"),l.sc(53,"form"),l.Ob(),l.sc(54," component. If you need to create a complex UI that is not a form but needs to pass, validate and submit data, take a look on to the "),l.Pb(55,"i"),l.sc(56,"Base Model Array without data-groups"),l.Ob(),l.sc(57," example. "),l.Ob(),l.Ob(),l.Pb(58,"code-block",2),l.Pb(59,"p"),l.sc(60," Here we can see the instance of the "),l.Pb(61,"code"),l.sc(62,"BaseModelArray"),l.Ob(),l.sc(63," initialized in the "),l.Pb(64,"code"),l.sc(65,"exampleModel"),l.Ob(),l.sc(66," property. It receives as parameter in the constructor the DTO class, which contains all the data attributes and validation rules. "),l.Ob(),l.Pb(67,"p"),l.sc(68," The "),l.Pb(69,"code"),l.sc(70,"BaseModelArray"),l.Ob(),l.sc(71," also provides us of useful methods to fill or clear our form UI with data. Also to add and delete records. "),l.Ob(),l.Pb(72,"p"),l.sc(73," Finally, we can see how the submit action is handled thanks to the "),l.Pb(74,"code"),l.sc(75,"submitEvent"),l.Ob(),l.sc(76," from the "),l.Pb(77,"code"),l.sc(78,"data-groups"),l.Ob(),l.sc(79," component. It returns as event a promise that contains the validation status, errors and validated data ready to be send to the backend. "),l.Ob(),l.Ob(),l.Pb(80,"code-block",3),l.Pb(81,"p"),l.sc(82," On the DTO we find all the properties and validation rules to be loaded inside the "),l.Pb(83,"code"),l.sc(84,"BaseModelArray"),l.Ob(),l.sc(85," instance. "),l.Ob(),l.Ob(),l.Ob()),2&e&&(l.xb(7),l.bc("code",t.htmlCode),l.xb(51),l.bc("code",t.componentCode),l.xb(22),l.bc("code",t.dtoCode))},directives:[c.a,f.a,v.a,N],encapsulation:2}),e})(),S=(()=>{class e{}return Object(y.b)([Object(O.a)(),Object(x.a)()],e.prototype,"email",void 0),Object(y.b)([Object(P.a)(),Object(x.a)()],e.prototype,"city",void 0),Object(y.b)([Object(P.a)({},{each:!0}),Object(w.a)(1),Object(M.a)()],e.prototype,"favoriteFoods",void 0),e})();function K(e,t){if(1&e){const e=l.Qb();l.Pb(0,"button",19),l.Wb("click",(function(){l.lc(e);const t=l.Yb().index;return l.Yb().deleteRecord(t)})),l.Kb(1,"i",20),l.Ob()}}function U(e,t){if(1&e){const e=l.Qb();l.Pb(0,"div",9),l.Pb(1,"div",10),l.Pb(2,"div",11),l.Pb(3,"span"),l.Pb(4,"b"),l.sc(5),l.Ob(),l.Ob(),l.qc(6,K,2,0,"button",12),l.Ob(),l.Kb(7,"bs-input",13),l.Kb(8,"bs-select",14),l.Kb(9,"bs-select",15),l.Pb(10,"div",16),l.Pb(11,"button",17),l.Wb("click",(function(){l.lc(e);const n=t.index;return l.Yb().clear(n)})),l.sc(12," Clear "),l.Ob(),l.Pb(13,"button",18),l.Wb("click",(function(){l.lc(e);const n=t.index;return l.Yb().update(n)})),l.sc(14," Update "),l.Ob(),l.Ob(),l.Ob(),l.Ob()}if(2&e){const e=t.index,n=l.Yb();l.xb(5),l.uc("Record ",e+1,""),l.xb(1),l.bc("ngIf",n.exampleModel.length>1),l.xb(1),l.bc("model",n.exampleModel.find(e)),l.xb(1),l.bc("model",n.exampleModel.find(e))("options",n.cities),l.xb(1),l.bc("model",n.exampleModel.find(e))("options",n.favoriteFoods)("multiple",!0)}}function T(e,t){if(1&e&&(l.Pb(0,"div",21),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",22),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}function W(e,t){if(1&e&&(l.Pb(0,"div",23),l.Pb(1,"pre"),l.sc(2,"    "),l.Kb(3,"code",22),l.sc(4,"\n  "),l.Ob(),l.Ob()),2&e){const e=l.Yb();l.xb(3),l.bc("highlight",e.output)}}let H=(()=>{class e{constructor(){this.modelConfigs={highlightOnValid:!0},this.exampleModel=new g.b(S,{configs:this.modelConfigs}),this.maxNumberOfRecords=3,this.Array=Array,this.sampleData=[{email:"test@gmail.com",city:2,favoriteFoods:[3,1]},{email:"test@outlook.com",city:4,favoriteFoods:[2,4]},{email:"test@hotmail.com",city:1,favoriteFoods:[1,5]}],this.cities=[{value:1,viewValue:"Bogot\xe1"},{value:2,viewValue:"Medell\xedn"},{value:3,viewValue:"Cartagena"},{value:4,viewValue:"Santander"}],this.favoriteFoods=[{value:1,viewValue:"Pizza"},{value:2,viewValue:"Ice cream"},{value:3,viewValue:"Hamburger"},{value:4,viewValue:"Hot dog"}]}ngOnInit(){this.exampleModel.onEnterPress(()=>this.submit())}addRecord(){this.exampleModel.add()}deleteRecord(e){this.exampleModel.delete(e)}populate(){this.isValid=void 0,this.exampleModel.fill(this.sampleData)}clear(e){this.isValid=void 0,this.exampleModel.reset(e)}update(e){this.exampleModel.find(e).fill(this.sampleData[e])}submit(){this.exampleModel.validate().then(e=>{const{isValid:t,errors:n,validatedData:a}=e;this.isValid=t,this.output=t?JSON.stringify(a,null,2):JSON.stringify(n,null,2)})}ngOnDestroy(){this.exampleModel.unbindOnEnterPress()}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["running-code"]],decls:17,vars:6,consts:[[1,"d-flex","align-items-center","mb-3"],["type","button",1,"btn","btn-secondary",3,"disabled","click"],[1,"ml-2"],["class","card mb-3",4,"ngFor","ngForOf"],["type","button",1,"btn","btn-primary",3,"click"],["type","button",1,"btn","ml-3","btn-secondary",3,"click"],["type","button",1,"btn","ml-3","btn-info",3,"click"],["class","alert alert-danger mt-3",4,"ngIf"],["class","alert alert-success mt-3",4,"ngIf"],[1,"card","mb-3"],[1,"card-body"],[1,"card-title","d-flex","justify-content-between"],["type","button","class","btn btn-danger",3,"click",4,"ngIf"],["label","Email","name","email","placeholder","example@mail.com",3,"model"],["placeholder","Select one city","label","City","name","city",3,"model","options"],["placeholder","Select at least one food","label","Favorite foods","name","favoriteFoods",3,"model","options","multiple"],[1,"mt-3"],["type","button",1,"btn","btn-secondary",3,"click"],["type","button",1,"btn","btn-secondary","ml-3",3,"click"],["type","button",1,"btn","btn-danger",3,"click"],[1,"fa","fa-times"],[1,"alert","alert-danger","mt-3"],[3,"highlight"],[1,"alert","alert-success","mt-3"]],template:function(e,t){1&e&&(l.Pb(0,"div"),l.Pb(1,"div",0),l.Pb(2,"button",1),l.Wb("click",(function(){return t.addRecord()})),l.sc(3," Add record "),l.Ob(),l.Pb(4,"span",2),l.sc(5),l.Pb(6,"b"),l.sc(7),l.Ob(),l.Ob(),l.Ob(),l.qc(8,U,15,8,"div",3),l.Pb(9,"button",4),l.Wb("click",(function(){return t.submit()})),l.sc(10," Submit "),l.Ob(),l.Pb(11,"button",5),l.Wb("click",(function(){return t.populate()})),l.sc(12," Populate "),l.Ob(),l.Pb(13,"button",6),l.Wb("click",(function(){return t.clear()})),l.sc(14," Clear "),l.Ob(),l.Ob(),l.qc(15,T,5,1,"div",7),l.qc(16,W,5,1,"div",8)),2&e&&(l.xb(2),l.bc("disabled",t.exampleModel.length>=t.maxNumberOfRecords),l.xb(3),l.uc(" ",t.exampleModel.length," of "),l.xb(2),l.tc(t.maxNumberOfRecords),l.xb(1),l.bc("ngForOf",t.Array(t.exampleModel.length)),l.xb(7),l.bc("ngIf",!1===t.isValid),l.xb(1),l.bc("ngIf",!0===t.isValid))},directives:[a.i,a.j,A.a,B.a,C.b],encapsulation:2}),e})(),Y=(()=>{class e{ngOnInit(){this.htmlCode=n("aEtQ").default,this.componentCode=n("32+9").default,this.dtoCode=n("hYaj").default}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["demo-overview-2"]],decls:70,vars:3,consts:[["type","running-code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"]],template:function(e,t){1&e&&(l.Pb(0,"marker"),l.sc(1,"Base Model Array without "),l.Pb(2,"code"),l.sc(3,"data-groups"),l.Ob(),l.Ob(),l.Pb(4,"code-example"),l.Pb(5,"code-block",0),l.Kb(6,"running-code"),l.Ob(),l.Pb(7,"code-block",1),l.Pb(8,"p"),l.sc(9," On this example, we are not using the "),l.Pb(10,"code"),l.sc(11,"data-groups"),l.Ob(),l.sc(12," and "),l.Pb(13,"code"),l.sc(14,"data-group"),l.Ob(),l.sc(15," components. Instead of passing the "),l.Pb(16,"code"),l.sc(17,"BaseModel"),l.Ob(),l.sc(18," instance as property of the "),l.Pb(19,"code"),l.sc(20,"data-groups"),l.Ob(),l.sc(21," component, now the model must be passed as property of each form UI component. "),l.Ob(),l.Pb(22,"p"),l.sc(23," This way of using the "),l.Pb(24,"code"),l.sc(25,"BaseModel"),l.Ob(),l.sc(26," without "),l.Pb(27,"code"),l.sc(28,"data-groups"),l.Ob(),l.sc(29,", will let us to build more complex UI that need to pass, validate and submit data. "),l.Ob(),l.Ob(),l.Pb(30,"code-block",2),l.Pb(31,"p"),l.sc(32," Due to we lost the "),l.Pb(33,"code"),l.sc(34,"form"),l.Ob(),l.sc(35," native HTML component that wraps all the form UI components, now we need to subscribe to the model's event "),l.Pb(36,"code"),l.sc(37,"onEnterPress"),l.Ob(),l.sc(38," and pass as argument a "),l.Pb(39,"code"),l.sc(40,"submit"),l.Ob(),l.sc(41," event. With this all the form UI elements, bind to the "),l.Pb(42,"code"),l.sc(43,"BaseModel"),l.Ob(),l.sc(44," instance, will trigger the submit event when the "),l.Pb(45,"code"),l.sc(46,"Enter"),l.Ob(),l.sc(47," key is pressed, recovering the same behavior of a form without being a form. "),l.Ob(),l.Pb(48,"p"),l.sc(49," Also we need to code the "),l.Pb(50,"code"),l.sc(51,"submit"),l.Ob(),l.sc(52," method a little bit different: now we need to validate the model on the submit process. It will return again a promise of type "),l.Pb(53,"code"),l.sc(54,"ValidationResult"),l.Ob(),l.sc(55," that contains the validation status, errors and validated data ready to be send to the backend. "),l.Ob(),l.Pb(56,"p"),l.sc(57," Finally it's very important to unsubscribe from the "),l.Pb(58,"code"),l.sc(59,"onEnterPress"),l.Ob(),l.sc(60," event on the "),l.Pb(61,"code"),l.sc(62,"ngDestroy"),l.Ob(),l.sc(63," component's lifecycle to prevent a multiple subscription when the "),l.Pb(64,"code"),l.sc(65,"Enter"),l.Ob(),l.sc(66," key is pressed. "),l.Ob(),l.Ob(),l.Pb(67,"code-block",3),l.Pb(68,"p"),l.sc(69,"The DTO remains the same as the past example."),l.Ob(),l.Ob(),l.Ob()),2&e&&(l.xb(7),l.bc("code",t.htmlCode),l.xb(23),l.bc("code",t.componentCode),l.xb(37),l.bc("code",t.dtoCode))},directives:[c.a,f.a,v.a,H],encapsulation:2}),e})(),z=(()=>{class e extends s.a{}return e.\u0275fac=function(t){return J(t||e)},e.\u0275cmp=l.Db({type:e,selectors:[["app-overview"]],features:[l.ub],decls:29,vars:0,consts:[["href","/docs/bootstrap/setup","target","blank"]],template:function(e,t){1&e&&(l.Pb(0,"p"),l.sc(1," The "),l.Pb(2,"code"),l.sc(3,"BaseModelArray"),l.Ob(),l.sc(4," lets manipulate an array of "),l.Pb(5,"code"),l.sc(6,"BaseModel"),l.Ob(),l.sc(7," instances when we need to input, validate and submit multiple records at same time. "),l.Ob(),l.Pb(8,"p"),l.sc(9," A "),l.Pb(10,"code"),l.sc(11,"BaseModelArray"),l.Ob(),l.sc(12," instance can be used inside a "),l.Pb(13,"code"),l.sc(14,"data-groups"),l.Ob(),l.sc(15," component or independently. This second way is preferred if we are going to use a more complex UI that manage data that is not properly a form. "),l.Ob(),l.Pb(16,"p"),l.sc(17," For this examples, we are going to use the "),l.Pb(18,"a",0),l.sc(19,"Bootstrap 4.x Form Components"),l.Ob(),l.sc(20,". These extends from the "),l.Pb(21,"code"),l.sc(22,"DataInputBase"),l.Ob(),l.sc(23," class, making them compatible with the "),l.Pb(24,"code"),l.sc(25,"BaseModelArray"),l.Ob(),l.sc(26," instances. "),l.Ob(),l.Kb(27,"demo-overview-1"),l.Kb(28,"demo-overview-2"))},directives:[j,Y],encapsulation:2}),e})();const J=l.Rb(z),G=[{path:"",redirectTo:"overview",pathMatch:"full"},{path:"",component:m,children:[{path:"overview",component:z},{path:"api",component:r}]}];let q=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[i.d.forChild(G)],i.d]}),e})(),Q=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[o.a]]}),e})(),L=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[o.a]]}),e})(),X=(()=>{class e{}return e.\u0275mod=l.Hb({type:e}),e.\u0275inj=l.Gb({factory:function(t){return new(t||e)},imports:[[a.b,o.a,q,Q,L]]}),e})()},"R+Oj":function(e,t,n){"use strict";n.r(t),t.default="import {\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  ArrayMinSize,\n} from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  city: number;\n\n  @IsNumber({}, { each: true })\n  @ArrayMinSize(1)\n  @IsArray()\n  favoriteFoods: number[];\n}\n"},aEtQ:function(e,t,n){"use strict";n.r(t),t.default='<div>\n  <div class="d-flex align-items-center mb-3">\n    <button\n      type="button"\n      [disabled]="this.exampleModel.length >= this.maxNumberOfRecords"\n      class="btn btn-secondary"\n      (click)="addRecord()"\n    >\n      Add record\n    </button>\n    <span class="ml-2">\n      {{ this.exampleModel.length }} of <b>{{ maxNumberOfRecords }}</b>\n    </span>\n  </div>\n  <div\n    class="card mb-3"\n    *ngFor="let n of Array(this.exampleModel.length); let i = index"\n  >\n    <div class="card-body">\n      <div class="card-title d-flex justify-content-between">\n        <span>\n          <b>Record {{ i + 1 }}</b>\n        </span>\n        <button\n          type="button"\n          *ngIf="this.exampleModel.length > 1"\n          class="btn btn-danger"\n          (click)="deleteRecord(i)"\n        >\n          <i class="fa fa-times"></i>\n        </button>\n      </div>\n      <bs-input\n        [model]="exampleModel.find(i)"\n        label="Email"\n        name="email"\n        placeholder="example@mail.com"\n      ></bs-input>\n      <bs-select\n        [model]="exampleModel.find(i)"\n        placeholder="Select one city"\n        label="City"\n        name="city"\n        [options]="cities"\n      ></bs-select>\n      <bs-select\n        [model]="exampleModel.find(i)"\n        placeholder="Select at least one food"\n        label="Favorite foods"\n        name="favoriteFoods"\n        [options]="favoriteFoods"\n        [multiple]="true"\n      ></bs-select>\n      <div class="mt-3">\n        <button type="button" class="btn btn-secondary" (click)="clear(i)">\n          Clear\n        </button>\n        <button\n          type="button"\n          class="btn btn-secondary ml-3"\n          (click)="update(i)"\n        >\n          Update\n        </button>\n      </div>\n    </div>\n  </div>\n  <button type="button" class="btn btn-primary" (click)="submit()">\n    Submit\n  </button>\n  <button type="button" class="btn ml-3 btn-secondary" (click)="populate()">\n    Populate\n  </button>\n  <button type="button" class="btn ml-3 btn-info" (click)="clear()">\n    Clear\n  </button>\n</div>\n<div *ngIf="isValid === false" class="alert alert-danger mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n<div *ngIf="isValid === true" class="alert alert-success mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n'},hYaj:function(e,t,n){"use strict";n.r(t),t.default="import {\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  ArrayMinSize,\n} from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  city: number;\n\n  @IsNumber({}, { each: true })\n  @ArrayMinSize(1)\n  @IsArray()\n  favoriteFoods: number[];\n}\n"},o5fg:function(e,t,n){"use strict";n.r(t),t.default='<data-groups\n  (submitEvent)="submit($event)"\n  [model]="exampleModel"\n  [highlightOnValid]="true"\n>\n  <div class="d-flex align-items-center mb-3">\n    <button\n      type="button"\n      [disabled]="this.exampleModel.length >= this.maxNumberOfRecords"\n      class="btn btn-secondary"\n      (click)="addRecord()"\n    >\n      Add record\n    </button>\n    <span class="ml-2">\n      {{ this.exampleModel.length }} of <b>{{ maxNumberOfRecords }}</b></span\n    >\n  </div>\n  <data-group\n    class="card mb-3"\n    *ngFor="let n of Array(this.exampleModel.length); let i = index"\n  >\n    <div class="card-body">\n      <div class="card-title d-flex justify-content-between">\n        <span>\n          <b>Record {{ i + 1 }}</b>\n        </span>\n        <button\n          type="button"\n          *ngIf="this.exampleModel.length > 1"\n          class="btn btn-danger"\n          (click)="deleteRecord(i)"\n        >\n          <i class="fa fa-times"></i>\n        </button>\n      </div>\n      <bs-input\n        #dataInput\n        label="Email"\n        name="email"\n        placeholder="example@mail.com"\n      ></bs-input>\n      <bs-select\n        #dataInput\n        placeholder="Select one city"\n        label="City"\n        name="city"\n        [options]="cities"\n      ></bs-select>\n      <bs-select\n        #dataInput\n        placeholder="Select at least one food"\n        label="Favorite foods"\n        name="favoriteFoods"\n        [options]="favoriteFoods"\n        [multiple]="true"\n      ></bs-select>\n      <div class="mt-3">\n        <button type="button" class="btn btn-secondary" (click)="clear(i)">\n          Clear\n        </button>\n        <button\n          type="button"\n          class="btn btn-secondary ml-3"\n          (click)="update(i)"\n        >\n          Update\n        </button>\n      </div>\n    </div>\n  </data-group>\n  <button class="btn btn-primary">Submit</button>\n  <button type="button" class="btn ml-3 btn-secondary" (click)="populate()">\n    Populate\n  </button>\n  <button type="button" class="btn ml-3 btn-info" (click)="clear()">\n    Clear\n  </button>\n</data-groups>\n<div *ngIf="isValid === false" class="alert alert-danger mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n<div *ngIf="isValid === true" class="alert alert-success mt-3">\n  <pre>\n    <code [highlight]="output"></code>\n  </pre>\n</div>\n'},vo4Z:function(e,t,n){"use strict";n.r(t),t.default="import { Component } from '@angular/core';\nimport { BaseModelArray } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent {\n  public exampleModel: BaseModelArray = new BaseModelArray(ExampleDto);\n  public output: string;\n  public isValid: boolean;\n  public maxNumberOfRecords: number = 3;\n  public Array = Array;\n\n  private sampleData: ExampleDto[] = [\n    {\n      email: 'test@gmail.com',\n      city: 2,\n      favoriteFoods: [3, 1],\n    },\n    {\n      email: 'test@outlook.com',\n      city: 4,\n      favoriteFoods: [2, 4],\n    },\n    {\n      email: 'test@hotmail.com',\n      city: 1,\n      favoriteFoods: [1, 5],\n    },\n  ];\n\n  public cities = [\n    { value: 1, viewValue: 'Bogot\xe1' },\n    { value: 2, viewValue: 'Medell\xedn' },\n    { value: 3, viewValue: 'Cartagena' },\n    { value: 4, viewValue: 'Santander' },\n  ];\n\n  public favoriteFoods = [\n    { value: 1, viewValue: 'Pizza' },\n    { value: 2, viewValue: 'Ice cream' },\n    { value: 3, viewValue: 'Hamburger' },\n    { value: 4, viewValue: 'Hot dog' },\n  ];\n\n  public addRecord(): void {\n    this.exampleModel.add();\n  }\n\n  public deleteRecord(index: number): void {\n    this.exampleModel.delete(index);\n  }\n\n  public populate(): void {\n    this.isValid = undefined;\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  public clear(index?: number): void {\n    this.isValid = undefined;\n    this.exampleModel.reset(index);\n  }\n\n  public update(index?: number): void {\n    this.exampleModel.find(index).fill(this.sampleData[index]);\n  }\n\n  public submit(event): void {\n    event.then((validationResult) => {\n      const { isValid, errors, validatedData } = validationResult;\n      this.isValid = isValid;\n\n      if (isValid) {\n        //Send the data to backend\n        this.output = JSON.stringify(validatedData, null, 2);\n      } else {\n        //(Optional) write your logic when data is invalid\n        this.output = JSON.stringify(errors, null, 2);\n      }\n    });\n  }\n}\n"}}]);