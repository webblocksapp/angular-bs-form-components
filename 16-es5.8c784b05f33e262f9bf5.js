!function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function t(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=c(e);if(t){var i=c(this).constructor;n=Reflect.construct(o,arguments,i)}else n=o.apply(this,arguments);return s(this,n)}}function s(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"2CJM":function(e,t,n){"use strict";n.r(t),t.default="import { Component } from '@angular/core';\nimport { DataInputBase, parseValue } from '@webblocksapp/ng-data-groups';\n\n@Component({\n  selector: 'text-input',\n  templateUrl: 'text-input.component.html',\n  styleUrls: ['text-input.component.css'],\n})\nexport class TextInputComponent extends DataInputBase {\n  bindFocusoutEvents(event: any): any {\n    this.validateField();\n    return event;\n  }\n\n  bindInputEvents(event: any): any {\n    const value = parseValue(event.target.value);\n\n    this.fillModel(value);\n    return event;\n  }\n}\n"},"3d1w":function(e,t,n){"use strict";n.r(t),t.default="import { IsNotEmpty, IsNumber } from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @IsNumber()\n  @IsNotEmpty()\n  city: number;\n}\n"},"4ng0":function(e,t,n){"use strict";n.r(t),t.default='<data-groups [model]="exampleModel" [highlightOnValid]="true">\n  <data-group>\n    <text-input #dataInput label="Email" type="email" name="email"></text-input>\n    <text-input\n      #dataInput\n      label="Nick name"\n      name="nickName"\n      help="Your name alias that will be displayed on the chat"\n    ></text-input>\n  </data-group>\n  <div class="d-flex">\n    <button class="btn btn-primary">Send</button>\n    <button type="button" class="btn btn-secondary ml-3" (click)="populate()">\n      Populate\n    </button>\n    <button type="button" class="btn btn-info ml-3" (click)="clear()">\n      Clear\n    </button>\n  </div>\n</data-groups>\n'},"6C12":function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var o=n("Oi9s");function i(e){return Object(o.a)({name:"isNotEmpty",validator:{validate:function(e,t){return function(e){return""!==e&&null!=e}(e)},defaultMessage:Object(o.b)((function(e){return e+"$property should not be empty"}),e)}},e)}},"8Clq":function(e,t,n){"use strict";n.r(t),t.default="import { Component } from '@angular/core';\nimport { BaseModel } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent {\n  public exampleModel: BaseModel = new BaseModel(ExampleDto);\n  private sampleData: ExampleDto = {\n    fruits: [1, 5, 6],\n    cities: [2, 3],\n  };\n\n  public fruits = [\n    { value: 1, viewValue: 'Banana' },\n    { value: 2, viewValue: 'Apple' },\n    { value: 3, viewValue: 'Grapes' },\n    { value: 4, viewValue: 'Orange' },\n    { value: 5, viewValue: 'Strawberry' },\n    { value: 6, viewValue: 'Lemon' },\n  ];\n\n  public cities = [\n    { value: 1, viewValue: 'Cali' },\n    { value: 2, viewValue: 'Bogot\xe1' },\n    { value: 3, viewValue: 'Lima' },\n    { value: 4, viewValue: 'Quito' },\n    { value: 5, viewValue: 'Caracas' },\n    { value: 6, viewValue: 'Buenos Aires' },\n  ];\n\n  populate() {\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  clear() {\n    this.exampleModel.reset();\n  }\n}\n"},"8k2u":function(e,t,n){"use strict";n.r(t),t.default='<div\n  [ngClass]="{\n    \'is-invalid\': isInvalid,\n    \'is-valid\': isValid\n  }"\n>\n  <label>{{ label }}</label>\n  <select\n    [id]="id + \'-my-component\'"\n    [name]="name"\n    [value]="value"\n    (change)="change($event)"\n  >\n    <option hidden [value]="null">{{ placeholder }}</option>\n    <option *ngFor="let option of options" [value]="option.value">\n      {{ option.viewValue }}\n    </option>\n  </select>\n  <small class="help-text" *ngIf="help">{{ help }}</small>\n  <small class="error-feedback" *ngIf="error">\n    {{ error }}\n  </small>\n</div>\n'},"8nvs":function(e,t,n){"use strict";n.r(t),t.default="import { Component } from '@angular/core';\nimport { BaseModel } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent {\n  public exampleModel: BaseModel = new BaseModel(ExampleDto);\n  private sampleData: ExampleDto = {\n    city: 1,\n  };\n\n  public selectOptions = [\n    { value: 1, viewValue: 'Bogot\xe1' },\n    { value: 2, viewValue: 'Lima' },\n    { value: 3, viewValue: 'Quito' },\n  ];\n\n  populate() {\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  clear() {\n    this.exampleModel.reset();\n  }\n}\n"},D8g5:function(e,t,n){"use strict";n.r(t),t.default="import { IsEmail, IsNotEmpty, IsString } from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  nickName: string;\n}\n"},KhLG:function(e,t,n){"use strict";n.r(t),t.default='<div\n  [ngClass]="{\n    \'is-invalid\': isInvalid,\n    \'is-valid\': isValid\n  }"\n>\n  <label>{{ label }}</label>\n  <select\n    #select\n    [id]="id + \'-my-component\'"\n    multiple\n    [name]="name"\n    (focusout)="focusout($event)"\n    [size]="size"\n  >\n    <option *ngFor="let option of options" [value]="option.value">\n      {{ option.viewValue }}\n    </option>\n  </select>\n  <small class="help-text" *ngIf="help">{{ help }}</small>\n  <small class="error-feedback" *ngIf="error">\n    {{ error }}\n  </small>\n</div>\n'},On7b:function(e,t,n){"use strict";n.r(t),t.default="import { Component } from '@angular/core';\nimport { BaseModel } from '@webblocksapp/ng-data-groups';\nimport { ExampleDto } from './example.dto';\n\n@Component({\n  selector: 'running-code',\n  templateUrl: './running-code.component.html',\n})\nexport class RunningCodeComponent {\n  public exampleModel: BaseModel = new BaseModel(ExampleDto);\n  private sampleData: ExampleDto = {\n    email: 'test@mail.com',\n    nickName: 'Allie',\n  };\n\n  populate() {\n    this.exampleModel.fill(this.sampleData);\n  }\n\n  clear() {\n    this.exampleModel.reset();\n  }\n}\n"},PiEg:function(e,t,n){"use strict";n.r(t),t.default="import { ArrayMinSize, IsArray, IsNumber } from '@webblocksapp/class-validator';\n\nexport class ExampleDto {\n  @ArrayMinSize(2)\n  @IsArray()\n  fruits: number[];\n\n  @IsNumber({}, { each: true })\n  @ArrayMinSize(1)\n  @IsArray()\n  cities: number[];\n}\n"},QzQE:function(e,t,n){"use strict";n.r(t),t.default=":host > div {\n  display: flex;\n  flex-flow: column;\n  margin-bottom: 17px;\n}\n\n.help-text {\n  opacity: 0.6;\n}\n\n.is-valid label {\n  color: rgb(0, 201, 174);\n}\n\n.is-valid select {\n  border: 1px solid rgb(0, 201, 174);\n}\n\n.is-invalid select {\n  border: 1px solid rgb(236, 23, 140);\n}\n\n.is-invalid label,\n.is-invalid .error-feedback {\n  color: rgb(236, 23, 140);\n}\n\nselect {\n  padding: 4px 2px;\n}\n"},SwXA:function(e,t,n){"use strict";n.r(t),t.default='<div\n  [ngClass]="{\n    \'is-invalid\': isInvalid,\n    \'is-valid\': isValid\n  }"\n>\n  <label>{{ label }}</label>\n  <input\n    [id]="id + \'-my-component\'"\n    [name]="name"\n    [type]="type"\n    [value]="value"\n    (focusout)="focusout($event)"\n    (input)="input($event)"\n    [attr.disabled]="disabled"\n    [attr.readonly]="readonly"\n  />\n  <small class="help-text" *ngIf="help">{{ help }}</small>\n  <small class="error-feedback" *ngIf="error">\n    {{ error }}\n  </small>\n</div>\n'},UQne:function(e,t,n){"use strict";n.r(t),t.default="import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { DataInputBase, parseValue } from '@webblocksapp/ng-data-groups';\n\n@Component({\n  selector: 'multi-select-input',\n  templateUrl: './multi-select-input.component.html',\n  styleUrls: ['./multi-select-input.component.css'],\n})\nexport class MultiSelectInputComponent extends DataInputBase {\n  @Input() options: { value: any; viewValue: any }[];\n  @Input() size: number | 'auto';\n  @ViewChild('select', { read: ElementRef }) select: ElementRef;\n\n  detectPropertiesChanges(propName: string): void {\n    if (propName === 'size') this.computeSize();\n  }\n\n  bindWatchModelEvents(): void {\n    this.initSelectedOptions();\n  }\n\n  bindFocusoutEvents(event: any): any {\n    const value = this.getSelectedOptions();\n    this.fillModel(value);\n    this.validateField();\n\n    return event;\n  }\n\n  initSelectedOptions(): void {\n    const options = this.select.nativeElement.querySelectorAll('option');\n    options.forEach((option) => {\n      if (this.value?.indexOf(parseValue(option.value)) >= 0) {\n        option.selected = true;\n      } else {\n        option.selected = false;\n      }\n    });\n  }\n\n  getSelectedOptions(): Array<any> {\n    const options =\n      this.select.nativeElement.querySelectorAll('option:checked');\n    return Array.from(options).map((el: any) => parseValue(el.value));\n  }\n\n  computeSize(): void {\n    if (this.size === 'auto') {\n      this.size = this.options.length;\n    }\n  }\n}\n"},XJ2Q:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var o=n("Oi9s");function i(e,t){return Object(o.a)({name:"arrayMinSize",constraints:[e],validator:{validate:function(e,t){return function(e,t){return e instanceof Array&&e.length>=t}(e,t.constraints[0])},defaultMessage:Object(o.b)((function(e){return e+"$property must contain at least $constraint1 elements"}),t)}},t)}},fpoe:function(e,t,n){"use strict";n.r(t),t.default='<data-groups [model]="exampleModel" [highlightOnValid]="true">\n  <data-group>\n    <multi-select-input\n      #dataInput\n      label="Fruits"\n      help="Select at least 2 fruits"\n      name="fruits"\n      [options]="fruits"\n      size="auto"\n    ></multi-select-input>\n    <multi-select-input\n      #dataInput\n      label="Cities"\n      help="Select at least 1 city"\n      name="cities"\n      [options]="cities"\n      [size]="10"\n    ></multi-select-input>\n  </data-group>\n  <div class="d-flex">\n    <button class="btn btn-primary">Send</button>\n    <button type="button" class="btn btn-secondary ml-3" (click)="populate()">\n      Populate\n    </button>\n    <button type="button" class="btn btn-info ml-3" (click)="clear()">\n      Clear\n    </button>\n  </div>\n</data-groups>\n'},kRb8:function(e,t,n){"use strict";n.r(t),t.default="import { Component, Input } from '@angular/core';\nimport { DataInputBase, parseValue } from '@webblocksapp/ng-data-groups';\n\n@Component({\n  selector: 'select-input',\n  templateUrl: './select-input.component.html',\n  styleUrls: ['./select-input.component.css'],\n})\nexport class SelectInputComponent extends DataInputBase {\n  @Input() options: { value: any; viewValue: any }[];\n\n  bindChangeEvents(event: any): any {\n    const value = parseValue(event.target.value);\n    this.fillModel(value);\n    this.validateField();\n\n    return event;\n  }\n}\n"},na5Y:function(e,t,n){"use strict";n.r(t),t.default=":host > div {\n  display: flex;\n  flex-flow: column;\n  margin-bottom: 17px;\n}\n\n.help-text {\n  opacity: 0.6;\n}\n\n.is-valid label {\n  color: rgb(0, 201, 174);\n}\n\n.is-valid input {\n  border: 1px solid rgb(0, 201, 174);\n}\n\n.is-invalid input {\n  border: 1px solid rgb(236, 23, 140);\n}\n\n.is-invalid label,\n.is-invalid .error-feedback {\n  color: rgb(236, 23, 140);\n}\n"},toV4:function(e,t,n){"use strict";n.r(t),t.default=":host > div {\n  display: flex;\n  flex-flow: column;\n  margin-bottom: 17px;\n}\n\n.help-text {\n  opacity: 0.6;\n}\n\n.is-valid label {\n  color: rgb(0, 201, 174);\n}\n\n.is-valid select {\n  border: 1px solid rgb(0, 201, 174);\n}\n\n.is-invalid select {\n  border: 1px solid rgb(236, 23, 140);\n}\n\n.is-invalid label,\n.is-invalid .error-feedback {\n  color: rgb(236, 23, 140);\n}\n\nselect {\n  padding: 4px 2px;\n}\n"},"x/PV":function(e,i,s){"use strict";s.r(i),s.d(i,"IndexModule",(function(){return ke}));var c,l,r,u=s("ofXK"),d=s("PCNd"),p=s("tyNb"),b=s("gtvE"),m=s("fXoL"),h=s("ABAs"),v=s("CB9U"),f=((c=function(e){o(i,e);var t=a(i);function i(){var e;return n(this,i),(e=t.apply(this,arguments)).properties=[{name:"@Input() @HostBinding('id') id: string",description:"Input unique id."},{name:"@Input() label: string",description:"Input label."},{name:"@Input() name: string;",description:"Input name."},{name:"@Input() type: InputType",description:"Input type. Supported types: <code>text</code>, <code>password</code>, <code>email</code>."},{name:"@Input() size: any",description:"Input size."},{name:"@Input() placeholder",description:"Input placeholder."},{name:"@Input() disabled: boolean;",description:"Disabled input attribute."},{name:"@Input() readonly: boolean;",description:"Readonly input attribute."},{name:"@Input() help: string;",description:"Input hint text."},{name:"@Input() startSlot: string",description:"Appends a text slot at the beginning of the input."},{name:"@Input() startSlotHtml: string",description:"Appends an slot with rendered html at the beginning of the input."},{name:"@Input() endSlot: string",description:"Appends a text slot at the end of the input."},{name:"@Input() autocomplete: boolean",description:"Appends an slot with rendered html at the end of the input."},{name:"@Input() model: BaseModel",description:"The <code>BaseModel</code> instance."},{name:"@Input() highlightOnValid: boolean",description:"Enables highlighting when data is valid. By default is <code>false</code>."}],e.callableProperties=[{name:"error: string",description:"Contains the error message of the validated model."},{name:"isValid: boolean",description:"A computed property to define if data is valid. By default is <code>false</code>"},{name:"isInvalid: boolean",description:"A computed property to define if data is invalid. By default is <code>false</code>"},{name:"value: any",description:"The current component's value. By default is <code>null</code>."}],e.events=[{name:"@Output() focusEvent: EventEmitter<FocusEvent>",description:"Focus event emitter."},{name:"@Output() focusoutEvent: EventEmitter<FocusEvent>",description:"Focus out event emitter"},{name:"@Output() blurEvent: EventEmitter<FocusEvent>",description:"Blur event emitter"},{name:"@Output() changeEvent: EventEmitter<Event>",description:"Change event emitter"},{name:"@Output() inputEvent: EventEmitter<Event>",description:"Input event emitter"},{name:"@Output() keydownEvent: EventEmitter<KeyboardEvent>",description:"Keydown event emitter"},{name:"@Output() keypressEvent: EventEmitter<KeyboardEvent>",description:"Keypress event emitter"},{name:"@Output() keyupEvent: EventEmitter<KeyboardEvent>",description:"Keyup event emitter"},{name:"@Output() clickEvent: EventEmitter<MouseEvent>",description:"Click event emitter"},{name:"@Output() dblclickEvent: EventEmitter<MouseEvent>",description:"Dblclick event emitter"},{name:"@Output() mousedownEvent: EventEmitter<MouseEvent>",description:"Mouse down event emitter"},{name:"@Output() mousemoveEvent: EventEmitter<MouseEvent>",description:"Mouse move event emitter"},{name:"@Output() mouseoutEvent: EventEmitter<MouseEvent>",description:"Mouse out event emitter"},{name:"@Output() mouseoverEvent: EventEmitter<MouseEvent>",description:"Mouse over event emitter"},{name:"@Output() mouseupEvent: EventEmitter<MouseEvent>",description:"Mouse up event emitter"},{name:"@Output() mousewheelEvent: EventEmitter<MouseEvent>",description:"Mouse wheel event emitter"},{name:"@Output() wheelEvent: EventEmitter<MouseEvent>",description:"Wheel event emitter"}],e.eventsTriggers=[{name:"focus(event: any): any",description:"<code>@Output() focusEvent: EventEmitter<FocusEvent></code>"},{name:"focusout(event: any): any",description:"<code>@Output() focusoutEvent: EventEmitter<FocusEvent></code>"},{name:"blur(event: any): any",description:"<code>@Output() blurEvent: EventEmitter<FocusEvent></code>"},{name:"change(event: any): any",description:"<code>@Output() changeEvent: EventEmitter<Event></code>"},{name:"input(event: any): any",description:"<code>@Output() inputEvent: EventEmitter<Event></code>"},{name:"keyup(event: any): any",description:"<code>@Output() keyupEvent: EventEmitter<KeyboardEvent>"},{name:"keydown(event: any): any",description:"<code>@Output() keydownEvent: EventEmitter<KeyboardEvent></code>"},{name:"keypress(event: any): any",description:"<code>@Output() keypressEvent: EventEmitter<KeyboardEvent></code>"},{name:"click(event: any): any",description:"<code>@Output() clickEvent: EventEmitter<MouseEvent></code>"},{name:"dblclick(event: any): any",description:"<code>@Output() dblclickEvent: EventEmitter<MouseEvent></code>"},{name:"mousedown(event: any): any",description:"<code>@Output() mousedownEvent: EventEmitter<MouseEvent></code>"},{name:"mousemove(event: any): any",description:"<code>@Output() mousemoveEvent: EventEmitter<MouseEvent></code>"},{name:"mouseout(event: any): any",description:"<code>@Output() mouseoutEvent: EventEmitter<MouseEvent></code>"},{name:"mouseover(event: any): any",description:"<code>@Output() mouseoverEvent: EventEmitter<MouseEvent></code>"},{name:"mouseup(event: any): any",description:"<code>@Output() mouseupEvent: EventEmitter<MouseEvent></code>"},{name:"mousewheel(event: any): any",description:"<code>@Output() mousewheelEvent: EventEmitter<MouseEvent></code>"},{name:"wheel(event: any): any",description:"<code>@Output() wheelEvent: EventEmitter<MouseEvent></code>"}],e.eventsBinders=[{name:"bindFocusEvents(event: any): any",description:"<code>focus(event: any): any</code>"},{name:"bindFocusoutEvents(event: any): any",description:"<code>focusout(event: any): any</code>"},{name:"bindBlurEvents(event: any): any",description:"<code>blur(event: any): any</code>"},{name:"bindChangeEvents(event: any): any",description:"<code>change(event: any): any</code>"},{name:"bindInputEvents(event: any): any",description:"<code>input(event: any): any</code>"},{name:"bindKeyupEvents(event: any): any",description:"<code>keyup(event: any): any</code>"},{name:"bindKeydownEvents(event: any): any",description:"<code>keydown(event: any): any</code>"},{name:"bindKeypressEvents(event: any): any",description:"<code>keypress(event: any): any</code>"},{name:"bindClickEvents(event: any): any",description:"<code>click(event: any): any</code>"},{name:"bindDblclickEvents(event: any): any",description:"<code>dblclick(event: any): any</code>"},{name:"bindMousedownEvents(event: any): any",description:"<code>mousedown(event: any): any</code>"},{name:"bindMousemoveEvents(event: any): any",description:"<code>mousemove(event: any): any</code>"},{name:"bindMouseoutEvents(event: any): any",description:"<code>mouseout(event: any): any</code>"},{name:"bindMouseoverEvents(event: any): any",description:"<code>mouseover(event: any): any</code>"},{name:"bindMouseupEvents(event: any): any",description:"<code>mouseup(event: any): any</code>"},{name:"bindMousewheelEvents(event: any): any",description:"<code>mousewheel(event: any): any</code>"},{name:"bindWheelEvents(event: any): any",description:"<code>wheel(event: any): any</code>"}],e.lifeCycleMethods=[{name:"setConfigsOnInit(): void",description:"<code>ngOnInit()</code>"},{name:"setConfigsAfterViewInit(): void",description:"<code>ngAfterViewInit()</code>"},{name:"setConfigsOnChanges(): void",description:"<code>ngOnChanges()</code>"},{name:"setConfigsOnDoCheck(): void",description:"<code>ngDoCheck()</code>"},{name:"setConfigsOnDestroy(): void",description:"<code>ngOnDestroy()</code>"}],e.watcherMethods=[{name:"detectPropertiesChanges(propName: string): void",description:"Any <code>@Input</code> property inherited and declared on the component. The <code>propName</code> argument is the name of the changing <code>@Input</code> property."},{name:"bindWatchModelEvents(): void",description:"<code>@Input() model: BaseModel</code>."}],e.validationMethods=[{name:"validateField(): void",description:"Callable method. Triggers the validation of the data inside the component."},{name:"bindEventsAfterValidateField(): void",description:"Over-writable method. Triggered after <code>validateField</code> method occurs."}],e}return i}(b.a)).\u0275fac=function(e){return g(e||c)},c.\u0275cmp=m.Db({type:c,selectors:[["app-api"]],features:[m.ub],decls:64,vars:8,consts:[[1,"mb-3"],[3,"data"],["description-title",""]],template:function(e,t){1&e&&(m.Pb(0,"h4"),m.sc(1,"Api reference for Data Input Base class"),m.Ob(),m.Pb(2,"p",0),m.sc(3," Here we can find all the properties, events and methods than will be inherited by the form component that extends from the "),m.Pb(4,"code"),m.sc(5,"DataInputBase"),m.Ob(),m.sc(6," class. "),m.Ob(),m.Pb(7,"marker"),m.sc(8,"Input Properties"),m.Ob(),m.Pb(9,"p"),m.sc(10," It's a set of callable input properties during the implementation of the built component. "),m.Ob(),m.Kb(11,"api-table",1),m.Pb(12,"marker"),m.sc(13,"Callable Properties"),m.Ob(),m.Pb(14,"p"),m.sc(15," It's a set of callable properties to help building the component's logic. "),m.Ob(),m.Kb(16,"api-table",1),m.Pb(17,"marker"),m.sc(18,"Events"),m.Ob(),m.Pb(19,"p"),m.sc(20," It's a set of callable events during the implementation of the built component. "),m.Ob(),m.Kb(21,"api-table",1),m.Pb(22,"marker"),m.sc(23,"Events Triggers"),m.Ob(),m.Pb(24,"p"),m.sc(25," It's a set of callable methods when building the component's logic. Once called an event will be emitted. "),m.Ob(),m.Pb(26,"api-table",1),m.Pb(27,"span",2),m.sc(28,"Triggered event"),m.Ob(),m.Ob(),m.Pb(29,"marker"),m.sc(30,"Events Binders"),m.Ob(),m.Pb(31,"p"),m.sc(32," It's a set of over-writable methods to bind additional logic inside an event trigger. It must always return the passed "),m.Pb(33,"code"),m.sc(34,"event"),m.Ob(),m.sc(35,". "),m.Ob(),m.Pb(36,"api-table",1),m.Pb(37,"span",2),m.sc(38,"Adds additional logic to the event trigger"),m.Ob(),m.Ob(),m.Pb(39,"marker"),m.sc(40,"Lifecycle methods"),m.Ob(),m.Pb(41,"p"),m.sc(42," The "),m.Pb(43,"code"),m.sc(44,"DataInputBase"),m.Ob(),m.sc(45," class provides it's own over-writable lifecycle methods to avoid using some of the provided by an Angular component. It's because there is logic running inside the default Angular lifecycle methods on the base class. So overriding them, it will break the behavior of the base component. "),m.Ob(),m.Pb(46,"api-table",1),m.Pb(47,"span",2),m.sc(48,"It does the same functionality of"),m.Ob(),m.Ob(),m.Pb(49,"marker"),m.sc(50,"Watcher methods"),m.Ob(),m.Pb(51,"p"),m.sc(52," The following over-writable methods are triggered when a property changes inside the "),m.Pb(53,"code"),m.sc(54,"DataInputBase"),m.Ob(),m.sc(55,". "),m.Ob(),m.Pb(56,"api-table",1),m.Pb(57,"span",2),m.sc(58," Triggered when the following property changes "),m.Ob(),m.Ob(),m.Pb(59,"marker"),m.sc(60,"Validation methods"),m.Ob(),m.Pb(61,"p"),m.sc(62,"The following methods are used for data validation."),m.Ob(),m.Kb(63,"api-table",1)),2&e&&(m.xb(11),m.bc("data",t.properties),m.xb(5),m.bc("data",t.callableProperties),m.xb(5),m.bc("data",t.events),m.xb(5),m.bc("data",t.eventsTriggers),m.xb(10),m.bc("data",t.eventsBinders),m.xb(10),m.bc("data",t.lifeCycleMethods),m.xb(10),m.bc("data",t.watcherMethods),m.xb(7),m.bc("data",t.validationMethods))},directives:[h.a,v.a],encapsulation:2}),c),g=m.Rb(f),y=s("NiOw"),O=s("FKbk"),P=((l=function(e){o(i,e);var t=a(i);function i(){var e;return n(this,i),(e=t.apply(this,arguments)).routes=[{title:"Overview",path:"overview"},{title:"Api",path:"api"}],e}return i}(b.b)).\u0275fac=function(e){return w(e||l)},l.\u0275cmp=m.Db({type:l,selectors:[["app-data-groups"]],features:[m.ub],decls:6,vars:2,consts:[[3,"markers"],[1,"mb-4"],[3,"routes"],[1,"pt-3"],[3,"activate"]],template:function(e,t){1&e&&(m.Pb(0,"app-docs-container",0),m.Pb(1,"h5",1),m.sc(2,"Data Input Base"),m.Ob(),m.Kb(3,"app-tabs",2),m.Pb(4,"div",3),m.Pb(5,"router-outlet",4),m.Wb("activate",(function(e){return t.onActivate(e)})),m.Ob(),m.Ob(),m.Ob()),2&e&&(m.bc("markers",t.markers),m.xb(3),m.bc("routes",t.routes))},directives:[y.a,O.a,p.e],encapsulation:2}),l),w=m.Rb(P),x=s("KRIm"),E=s("oIZk"),k=s("uTO9"),C=s("mrSG"),I=s("hsmS"),M=s("6C12"),S=s("Oi9s"),V=(r=function e(){n(this,e)},Object(C.b)([Object(I.a)(),Object(M.a)()],r.prototype,"email",void 0),Object(C.b)([Object(S.a)({name:"isString",validator:{validate:function(e,t){return function(e){return e instanceof String||"string"==typeof e}(e)},defaultMessage:Object(S.b)((function(e){return e+"$property must be a string"}),void 0)}},void 0),Object(M.a)()],r.prototype,"nickName",void 0),r),D=s("c7wr"),T=s("mube");function B(e,t){if(1&e&&(m.Pb(0,"small",4),m.sc(1),m.Ob()),2&e){var n=m.Yb();m.xb(1),m.tc(n.help)}}function A(e,t){if(1&e&&(m.Pb(0,"small",5),m.sc(1),m.Ob()),2&e){var n=m.Yb();m.xb(1),m.uc(" ",n.error," ")}}var _,F,j=function(e,t){return{"is-invalid":e,"is-valid":t}},K=((_=function(e){o(s,e);var i=a(s);function s(){return n(this,s),i.apply(this,arguments)}return t(s,[{key:"bindFocusoutEvents",value:function(e){return this.validateField(),e}},{key:"bindInputEvents",value:function(e){var t=Object(k.g)(e.target.value);return this.fillModel(t),e}}]),s}(k.c)).\u0275fac=function(e){return z(e||_)},_.\u0275cmp=m.Db({type:_,selectors:[["text-input"]],features:[m.ub],decls:6,vars:13,consts:[[3,"ngClass"],[3,"id","name","type","value","focusout","input"],["class","help-text",4,"ngIf"],["class","error-feedback",4,"ngIf"],[1,"help-text"],[1,"error-feedback"]],template:function(e,t){1&e&&(m.Pb(0,"div",0),m.Pb(1,"label"),m.sc(2),m.Ob(),m.Pb(3,"input",1),m.Wb("focusout",(function(e){return t.focusout(e)}))("input",(function(e){return t.input(e)})),m.Ob(),m.qc(4,B,2,1,"small",2),m.qc(5,A,2,1,"small",3),m.Ob()),2&e&&(m.bc("ngClass",m.gc(10,j,t.isInvalid,t.isValid)),m.xb(2),m.tc(t.label),m.xb(1),m.bc("id",t.id+"-my-component")("name",t.name)("type",t.type)("value",t.value),m.yb("disabled",t.disabled)("readonly",t.readonly),m.xb(1),m.bc("ngIf",t.help),m.xb(1),m.bc("ngIf",t.error))},directives:[u.h,u.j],styles:["[_nghost-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-flow:column;margin-bottom:17px}.help-text[_ngcontent-%COMP%]{opacity:.6}.is-valid[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#00c9ae}.is-valid[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid #00c9ae}.is-invalid[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid #ec178c}.is-invalid[_ngcontent-%COMP%]   .error-feedback[_ngcontent-%COMP%], .is-invalid[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#ec178c}"]}),_),z=m.Rb(K),N=((F=function(){function e(){n(this,e),this.exampleModel=new k.a(V),this.sampleData={email:"test@mail.com",nickName:"Allie"}}return t(e,[{key:"populate",value:function(){this.exampleModel.fill(this.sampleData)}},{key:"clear",value:function(){this.exampleModel.reset()}}]),e}()).\u0275fac=function(e){return new(e||F)},F.\u0275cmp=m.Db({type:F,selectors:[["running-code"]],decls:13,vars:2,consts:[[3,"model","highlightOnValid"],["label","Email","type","email","name","email"],["dataInput",""],["label","Nick name","name","nickName","help","Your name alias that will be displayed on the chat"],[1,"d-flex"],[1,"btn","btn-primary"],["type","button",1,"btn","btn-secondary","ml-3",3,"click"],["type","button",1,"btn","btn-info","ml-3",3,"click"]],template:function(e,t){1&e&&(m.Pb(0,"data-groups",0),m.Pb(1,"data-group"),m.Kb(2,"text-input",1,2),m.Kb(4,"text-input",3,2),m.Ob(),m.Pb(6,"div",4),m.Pb(7,"button",5),m.sc(8,"Send"),m.Ob(),m.Pb(9,"button",6),m.Wb("click",(function(){return t.populate()})),m.sc(10," Populate "),m.Ob(),m.Pb(11,"button",7),m.Wb("click",(function(){return t.clear()})),m.sc(12," Clear "),m.Ob(),m.Ob(),m.Ob()),2&e&&m.bc("model",t.exampleModel)("highlightOnValid",!0)},directives:[D.a,T.a,K],encapsulation:2}),F),H=function(){var e=function(){function e(){n(this,e)}return t(e,[{key:"ngOnInit",value:function(){this.htmlCode=s("4ng0").default,this.componentCode=s("On7b").default,this.dtoCode=s("D8g5").default,this.customComponentHtml1=s("SwXA").default,this.customComponentCss1=s("na5Y").default,this.customComponentTs1=s("2CJM").default}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=m.Db({type:e,selectors:[["demo-overview-1"]],decls:131,vars:6,consts:[["label","Demo:"],["content",""],[1,"i-btn","fas","fa-code"],["type","running-code"],["content-code",""],["label","Vanilla Text Input HTML","type","custom-component-html-1","language","html",3,"code"],["href","/docs/data-input-base/api","target","blank"],["label","Vanilla Text Input CSS","type","custom-component-css-1","language","css",3,"code"],["label","Vanilla Text Input TS","type","custom-component-ts-1","language","typescript",3,"code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"]],template:function(e,t){1&e&&(m.Pb(0,"marker"),m.sc(1,"Building a vanilla text input"),m.Ob(),m.Pb(2,"p"),m.sc(3," The following example is a simple input component created from scratch inheriting from the "),m.Pb(4,"code"),m.sc(5,"DataInputBase"),m.Ob(),m.sc(6," class. "),m.Ob(),m.Pb(7,"code-example",0),m.Pb(8,"div",1),m.sc(9," Check the code "),m.Kb(10,"i",2),m.sc(11," to see more details. "),m.Ob(),m.Pb(12,"code-block",3),m.Kb(13,"running-code"),m.Ob(),m.Pb(14,"div",4),m.Pb(15,"ul"),m.Pb(16,"li"),m.sc(17," On this example, the first three tabs are the built HTML, CSS and TS for the custom component "),m.Pb(18,"code"),m.sc(19,"text-input"),m.Ob(),m.sc(20,". "),m.Ob(),m.Pb(21,"li"),m.sc(22," The last three tabs are the implementation of the built custom component. "),m.Ob(),m.Ob(),m.Ob(),m.Pb(23,"code-block",5),m.Pb(24,"p"),m.sc(25," Here we have the HTML template of the custom component "),m.Pb(26,"code"),m.sc(27,"text-input"),m.Ob(),m.sc(28," created with NG Data Groups. Some useful properties of the framework where implemented to control the component highlighting and error feedback when it's validated: "),m.Ob(),m.Pb(29,"ul"),m.Pb(30,"li"),m.Pb(31,"code"),m.sc(32,"isValid"),m.Ob(),m.sc(33,": a computed property which determines when the component must render the valid css class to highlight it when it's data is valid. "),m.Ob(),m.Pb(34,"li"),m.Pb(35,"code"),m.sc(36,"isInValid"),m.Ob(),m.sc(37,": a computed property which determines when the component must render the invalid css class to highlight it when it's data has an error. "),m.Ob(),m.Pb(38,"li"),m.Pb(39,"code"),m.sc(40,"error"),m.Ob(),m.sc(41,": contains the error message to be displayed when data is invalid. "),m.Ob(),m.Pb(42,"li"),m.Pb(43,"code"),m.sc(44,"id"),m.Ob(),m.sc(45,": an auto-generated "),m.Pb(46,"code"),m.sc(47,"uuid"),m.Ob(),m.sc(48," to make your component with an unique html id. It's mandatory to concat the id with your custom namespace because it is also bind on the host component. "),m.Ob(),m.Pb(49,"li"),m.Pb(50,"code"),m.sc(51,"help"),m.Ob(),m.sc(52,": a help text, normally displayed below the input component. "),m.Ob(),m.Ob(),m.Pb(53,"p"),m.sc(54," You can check the other properties and methods on the "),m.Pb(55,"a",6),m.sc(56,"API section"),m.Ob(),m.sc(57,". "),m.Ob(),m.Ob(),m.Pb(58,"code-block",7),m.Pb(59,"p"),m.sc(60," Here we have the styles according to the different highlight events when data is valid or invalid. For this example the styles were directly written on the component but they can be global if you are using a css framework like bootstrap, material, etc... The "),m.Pb(61,"code"),m.sc(62,"is-valid"),m.Ob(),m.sc(63," and "),m.Pb(64,"code"),m.sc(65,"is-invalid"),m.Ob(),m.sc(66," css classes may vary according to the css framework you are working with or simply to have another name. "),m.Ob(),m.Ob(),m.Pb(67,"code-block",8),m.Pb(68,"p"),m.sc(69," Here is were magic occurs when our Angular components extends from the "),m.Pb(70,"code"),m.sc(71,"DataInputBase"),m.Ob(),m.sc(72," class. To trigger the validation highlighting, it's important to define which events will take care of that. Here the validation is triggered when the component is focused out using the framework's method "),m.Pb(73,"code"),m.sc(74,"bindFocusoutEvents"),m.Ob(),m.sc(75,". "),m.Ob(),m.Pb(76,"p"),m.sc(77," Also it's important to fill the model with the value that the html input is receiving. For this, the most recommended method is the "),m.Pb(78,"code"),m.sc(79,"bindInputEvents"),m.Ob(),m.sc(80," to fill the model when the input event occurs. "),m.Ob(),m.Pb(81,"p"),m.sc(82," If you want that your component detect the data type of your input, use the "),m.Pb(83,"code"),m.sc(84,"parseValue"),m.Ob(),m.sc(85," helper function. It will be very useful if your DTO needs to validate the data type. As you can see on this example, the "),m.Pb(86,"code"),m.sc(87,"nickName"),m.Ob(),m.sc(88," field is validated as a string on the DTO, so if you input a number, it will show an error. "),m.Ob(),m.Ob(),m.Pb(89,"code-block",9),m.Pb(90,"p"),m.sc(91," Here we have implemented the "),m.Pb(92,"code"),m.sc(93,"text-input"),m.Ob(),m.sc(94," component. Using "),m.Pb(95,"code"),m.sc(96,"DataInputBase"),m.Ob(),m.sc(97," as parent class, it can now receive the data from the model when it's wrapped on a "),m.Pb(98,"code"),m.sc(99,"data-groups"),m.Ob(),m.sc(100," component. Remember also to add the template variable "),m.Pb(101,"code"),m.sc(102,"#dataInput"),m.Ob(),m.sc(103," and the "),m.Pb(104,"code"),m.sc(105,"name"),m.Ob(),m.sc(106," attribute to bind your model with your custom component. "),m.Ob(),m.Ob(),m.Pb(107,"code-block",10),m.Pb(108,"p"),m.sc(109," Check how is simple to fill and clear a form with the fill method provided by the "),m.Pb(110,"code"),m.sc(111,"BaseModel"),m.Ob(),m.sc(112," class. Also take a look of how the NG Data Groups Framework takes care of the component highlighting when data is valid or invalid, or when the model is filled or reset. "),m.Ob(),m.Ob(),m.Pb(113,"code-block",11),m.Pb(114,"p"),m.sc(115," Finally, the DTO has the properties with it's validation rules that will be loaded on the "),m.Pb(116,"code"),m.sc(117,"BaseModel"),m.Ob(),m.sc(118,". As you can see the "),m.Pb(119,"code"),m.sc(120,"nickName"),m.Ob(),m.sc(121," field has the decorator "),m.Pb(122,"code"),m.sc(123,"@IsString()"),m.Ob(),m.sc(124,", so as was mentioned before, our custom component "),m.Pb(125,"code"),m.sc(126,"text-input"),m.Ob(),m.sc(127," implemented the "),m.Pb(128,"code"),m.sc(129,"parseValue"),m.Ob(),m.sc(130," helper function to make the validation happens for this specific rule. If not, a number will be also taken as an string because by default the input is always parsed as string. "),m.Ob(),m.Ob(),m.Ob()),2&e&&(m.xb(23),m.bc("code",t.customComponentHtml1),m.xb(35),m.bc("code",t.customComponentCss1),m.xb(9),m.bc("code",t.customComponentTs1),m.xb(22),m.bc("code",t.htmlCode),m.xb(18),m.bc("code",t.componentCode),m.xb(6),m.bc("code",t.dtoCode))},directives:[h.a,x.a,E.a,N],encapsulation:2}),e}(),R=s("eB3s"),L=function(){var e=function e(){n(this,e)};return Object(C.b)([Object(R.a)(),Object(M.a)()],e.prototype,"city",void 0),e}();function W(e,t){if(1&e&&(m.Pb(0,"option",6),m.sc(1),m.Ob()),2&e){var n=t.$implicit;m.bc("value",n.value),m.xb(1),m.uc(" ",n.viewValue," ")}}function q(e,t){if(1&e&&(m.Pb(0,"small",7),m.sc(1),m.Ob()),2&e){var n=m.Yb();m.xb(1),m.tc(n.help)}}function G(e,t){if(1&e&&(m.Pb(0,"small",8),m.sc(1),m.Ob()),2&e){var n=m.Yb();m.xb(1),m.uc(" ",n.error," ")}}var U,Q=function(e,t){return{"is-invalid":e,"is-valid":t}},Y=((U=function(e){o(s,e);var i=a(s);function s(){return n(this,s),i.apply(this,arguments)}return t(s,[{key:"bindChangeEvents",value:function(e){var t=Object(k.g)(e.target.value);return this.fillModel(t),this.validateField(),e}}]),s}(k.c)).\u0275fac=function(e){return $(e||U)},U.\u0275cmp=m.Db({type:U,selectors:[["select-input"]],inputs:{options:"options"},features:[m.ub],decls:9,vars:13,consts:[[3,"ngClass"],[3,"id","name","value","change"],["hidden","",3,"value"],[3,"value",4,"ngFor","ngForOf"],["class","help-text",4,"ngIf"],["class","error-feedback",4,"ngIf"],[3,"value"],[1,"help-text"],[1,"error-feedback"]],template:function(e,t){1&e&&(m.Pb(0,"div",0),m.Pb(1,"label"),m.sc(2),m.Ob(),m.Pb(3,"select",1),m.Wb("change",(function(e){return t.change(e)})),m.Pb(4,"option",2),m.sc(5),m.Ob(),m.qc(6,W,2,2,"option",3),m.Ob(),m.qc(7,q,2,1,"small",4),m.qc(8,G,2,1,"small",5),m.Ob()),2&e&&(m.bc("ngClass",m.gc(10,Q,t.isInvalid,t.isValid)),m.xb(2),m.tc(t.label),m.xb(1),m.bc("id",t.id+"-my-component")("name",t.name)("value",t.value),m.xb(1),m.bc("value",null),m.xb(1),m.tc(t.placeholder),m.xb(1),m.bc("ngForOf",t.options),m.xb(1),m.bc("ngIf",t.help),m.xb(1),m.bc("ngIf",t.error))},directives:[u.h,u.i,u.j],styles:["[_nghost-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-flow:column;margin-bottom:17px}.help-text[_ngcontent-%COMP%]{opacity:.6}.is-valid[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#00c9ae}.is-valid[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{border:1px solid #00c9ae}.is-invalid[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{border:1px solid #ec178c}.is-invalid[_ngcontent-%COMP%]   .error-feedback[_ngcontent-%COMP%], .is-invalid[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#ec178c}select[_ngcontent-%COMP%]{padding:4px 2px}"]}),U),$=m.Rb(Y),X=function(){var e=function(){function e(){n(this,e),this.exampleModel=new k.a(L),this.sampleData={city:1},this.selectOptions=[{value:1,viewValue:"Bogot\xe1"},{value:2,viewValue:"Lima"},{value:3,viewValue:"Quito"}]}return t(e,[{key:"populate",value:function(){this.exampleModel.fill(this.sampleData)}},{key:"clear",value:function(){this.exampleModel.reset()}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=m.Db({type:e,selectors:[["running-code"]],decls:11,vars:3,consts:[[3,"model","highlightOnValid"],["label","City","name","city","placeholder","Select a city",3,"options"],["dataInput",""],[1,"d-flex"],[1,"btn","btn-primary"],["type","button",1,"btn","btn-secondary","ml-3",3,"click"],["type","button",1,"btn","btn-info","ml-3",3,"click"]],template:function(e,t){1&e&&(m.Pb(0,"data-groups",0),m.Pb(1,"data-group"),m.Kb(2,"select-input",1,2),m.Ob(),m.Pb(4,"div",3),m.Pb(5,"button",4),m.sc(6,"Send"),m.Ob(),m.Pb(7,"button",5),m.Wb("click",(function(){return t.populate()})),m.sc(8," Populate "),m.Ob(),m.Pb(9,"button",6),m.Wb("click",(function(){return t.clear()})),m.sc(10," Clear "),m.Ob(),m.Ob(),m.Ob()),2&e&&(m.bc("model",t.exampleModel)("highlightOnValid",!0),m.xb(2),m.bc("options",t.selectOptions))},directives:[D.a,T.a,Y],encapsulation:2}),e}(),J=function(){var e=function(){function e(){n(this,e)}return t(e,[{key:"ngOnInit",value:function(){this.htmlCode=s("ymo9").default,this.componentCode=s("8nvs").default,this.dtoCode=s("3d1w").default,this.customComponentHtml1=s("8k2u").default,this.customComponentCss1=s("QzQE").default,this.customComponentTs1=s("kRb8").default}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=m.Db({type:e,selectors:[["demo-overview-2"]],decls:75,vars:6,consts:[["label","Demo:"],["content",""],[1,"i-btn","fas","fa-code"],["type","running-code"],["content-code",""],["label","Vanilla Select Input HTML","type","custom-component-html-1","language","html",3,"code"],["label","Vanilla Select Input CSS","type","custom-component-css-1","language","css",3,"code"],["label","Vanilla Select Input TS","type","custom-component-ts-1","language","ts",3,"code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"]],template:function(e,t){1&e&&(m.Pb(0,"marker"),m.sc(1,"Building a vanilla select"),m.Ob(),m.Pb(2,"p"),m.sc(3," As the example before, here we will have a select component built from scratch inheriting from the "),m.Pb(4,"code"),m.sc(5,"DataInputBase"),m.Ob(),m.sc(6," class. "),m.Ob(),m.Pb(7,"code-example",0),m.Pb(8,"div",1),m.sc(9," Check the code "),m.Kb(10,"i",2),m.sc(11," to see more details. "),m.Ob(),m.Pb(12,"code-block",3),m.Kb(13,"running-code"),m.Ob(),m.Pb(14,"div",4),m.Pb(15,"ul"),m.Pb(16,"li"),m.sc(17," On this example, the first three tabs are the built HTML, CSS and TS for the custom component "),m.Pb(18,"code"),m.sc(19,"select-input"),m.Ob(),m.sc(20,". "),m.Ob(),m.Pb(21,"li"),m.sc(22," The last three tabs are the implementation of the built custom component. "),m.Ob(),m.Ob(),m.Ob(),m.Pb(23,"code-block",5),m.Pb(24,"p"),m.sc(25," As in the first example, some useful properties of the framework where implemented to control the "),m.Pb(26,"code"),m.sc(27,"select-input"),m.Ob(),m.sc(28," component highlighting and error feedback. "),m.Ob(),m.Pb(29,"p"),m.sc(30," Also we have to code the "),m.Pb(31,"code"),m.sc(32,"options"),m.Ob(),m.sc(33," property for rendering the select options. "),m.Ob(),m.Ob(),m.Pb(34,"code-block",6),m.Pb(35,"p"),m.sc(36," Here we have similar styles as in the first example for our custom component with it's highlighter classes. "),m.Ob(),m.Ob(),m.Pb(37,"code-block",7),m.Pb(38,"p"),m.sc(39," Again here is where magic happens when our custom component extends from "),m.Pb(40,"code"),m.sc(41,"DataInputBase"),m.Ob(),m.sc(42," class. "),m.Ob(),m.Pb(43,"p"),m.sc(44," To fill the model with the data selected, it's necessary to use the framework's method "),m.Pb(45,"code"),m.sc(46,"bindChangeEvents"),m.Ob(),m.sc(47," which is triggered when the "),m.Pb(48,"code"),m.sc(49,"change"),m.Ob(),m.sc(50," event occurs on the "),m.Pb(51,"code"),m.sc(52,"select"),m.Ob(),m.sc(53," html component. "),m.Ob(),m.Ob(),m.Pb(54,"code-block",8),m.Pb(55,"p"),m.sc(56," Here is the implementation of the "),m.Pb(57,"code"),m.sc(58,"select-input"),m.Ob(),m.sc(59," component. "),m.Ob(),m.Ob(),m.Pb(60,"code-block",9),m.Pb(61,"p"),m.sc(62," Again we can try the "),m.Pb(63,"code"),m.sc(64,"fill"),m.Ob(),m.sc(65," and "),m.Pb(66,"code"),m.sc(67,"clear"),m.Ob(),m.sc(68," methods to populate or reset the form. "),m.Ob(),m.Ob(),m.Pb(69,"code-block",10),m.Pb(70,"p"),m.sc(71," Finally the DTO defines the model structure and validation rules. On this case the "),m.Pb(72,"code"),m.sc(73,"city"),m.Ob(),m.sc(74," field must be numeric and required. "),m.Ob(),m.Ob(),m.Ob()),2&e&&(m.xb(23),m.bc("code",t.customComponentHtml1),m.xb(11),m.bc("code",t.customComponentCss1),m.xb(3),m.bc("code",t.customComponentTs1),m.xb(17),m.bc("code",t.htmlCode),m.xb(6),m.bc("code",t.componentCode),m.xb(9),m.bc("code",t.dtoCode))},directives:[h.a,x.a,E.a,X],encapsulation:2}),e}(),Z=s("XJ2Q"),ee=s("Sxtw"),te=function(){var e=function e(){n(this,e)};return Object(C.b)([Object(Z.a)(2),Object(ee.a)()],e.prototype,"fruits",void 0),Object(C.b)([Object(R.a)({},{each:!0}),Object(Z.a)(1),Object(ee.a)()],e.prototype,"cities",void 0),e}(),ne=["select"];function oe(e,t){if(1&e&&(m.Pb(0,"option",6),m.sc(1),m.Ob()),2&e){var n=t.$implicit;m.bc("value",n.value),m.xb(1),m.uc(" ",n.viewValue," ")}}function ie(e,t){if(1&e&&(m.Pb(0,"small",7),m.sc(1),m.Ob()),2&e){var n=m.Yb();m.xb(1),m.tc(n.help)}}function ae(e,t){if(1&e&&(m.Pb(0,"small",8),m.sc(1),m.Ob()),2&e){var n=m.Yb();m.xb(1),m.uc(" ",n.error," ")}}var se,ce,le,re,ue,de,pe,be=function(e,t){return{"is-invalid":e,"is-valid":t}},me=((se=function(e){o(s,e);var i=a(s);function s(){return n(this,s),i.apply(this,arguments)}return t(s,[{key:"detectPropertiesChanges",value:function(e){"size"===e&&this.computeSize()}},{key:"bindWatchModelEvents",value:function(){this.initSelectedOptions()}},{key:"bindFocusoutEvents",value:function(e){var t=this.getSelectedOptions();return this.fillModel(t),this.validateField(),e}},{key:"initSelectedOptions",value:function(){var e=this;this.select.nativeElement.querySelectorAll("option").forEach((function(t){var n;t.selected=(null===(n=e.value)||void 0===n?void 0:n.indexOf(Object(k.g)(t.value)))>=0}))}},{key:"getSelectedOptions",value:function(){var e=this.select.nativeElement.querySelectorAll("option:checked");return Array.from(e).map((function(e){return Object(k.g)(e.value)}))}},{key:"computeSize",value:function(){"auto"===this.size&&(this.size=this.options.length)}}]),s}(k.c)).\u0275fac=function(e){return he(e||se)},se.\u0275cmp=m.Db({type:se,selectors:[["multi-select-input"]],viewQuery:function(e,t){var n;1&e&&m.wc(ne,!0,m.l),2&e&&m.kc(n=m.Xb())&&(t.select=n.first)},inputs:{options:"options",size:"size"},features:[m.ub],decls:8,vars:11,consts:[[3,"ngClass"],["multiple","",3,"id","name","size","focusout"],["select",""],[3,"value",4,"ngFor","ngForOf"],["class","help-text",4,"ngIf"],["class","error-feedback",4,"ngIf"],[3,"value"],[1,"help-text"],[1,"error-feedback"]],template:function(e,t){1&e&&(m.Pb(0,"div",0),m.Pb(1,"label"),m.sc(2),m.Ob(),m.Pb(3,"select",1,2),m.Wb("focusout",(function(e){return t.focusout(e)})),m.qc(5,oe,2,2,"option",3),m.Ob(),m.qc(6,ie,2,1,"small",4),m.qc(7,ae,2,1,"small",5),m.Ob()),2&e&&(m.bc("ngClass",m.gc(8,be,t.isInvalid,t.isValid)),m.xb(2),m.tc(t.label),m.xb(1),m.bc("id",t.id+"-my-component")("name",t.name)("size",t.size),m.xb(2),m.bc("ngForOf",t.options),m.xb(1),m.bc("ngIf",t.help),m.xb(1),m.bc("ngIf",t.error))},directives:[u.h,u.i,u.j],styles:["[_nghost-%COMP%] > div[_ngcontent-%COMP%]{display:flex;flex-flow:column;margin-bottom:17px}.help-text[_ngcontent-%COMP%]{opacity:.6}.is-valid[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#00c9ae}.is-valid[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{border:1px solid #00c9ae}.is-invalid[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{border:1px solid #ec178c}.is-invalid[_ngcontent-%COMP%]   .error-feedback[_ngcontent-%COMP%], .is-invalid[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{color:#ec178c}select[_ngcontent-%COMP%]{padding:4px 2px}"]}),se),he=m.Rb(me),ve=function(){var e=function(){function e(){n(this,e),this.exampleModel=new k.a(te),this.sampleData={fruits:[1,5,6],cities:[2,3]},this.fruits=[{value:1,viewValue:"Banana"},{value:2,viewValue:"Apple"},{value:3,viewValue:"Grapes"},{value:4,viewValue:"Orange"},{value:5,viewValue:"Strawberry"},{value:6,viewValue:"Lemon"}],this.cities=[{value:1,viewValue:"Cali"},{value:2,viewValue:"Bogot\xe1"},{value:3,viewValue:"Lima"},{value:4,viewValue:"Quito"},{value:5,viewValue:"Caracas"},{value:6,viewValue:"Buenos Aires"}]}return t(e,[{key:"populate",value:function(){this.exampleModel.fill(this.sampleData)}},{key:"clear",value:function(){this.exampleModel.reset()}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=m.Db({type:e,selectors:[["running-code"]],decls:13,vars:5,consts:[[3,"model","highlightOnValid"],["label","Fruits","help","Select at least 2 fruits","name","fruits","size","auto",3,"options"],["dataInput",""],["label","Cities","help","Select at least 1 city","name","cities",3,"options","size"],[1,"d-flex"],[1,"btn","btn-primary"],["type","button",1,"btn","btn-secondary","ml-3",3,"click"],["type","button",1,"btn","btn-info","ml-3",3,"click"]],template:function(e,t){1&e&&(m.Pb(0,"data-groups",0),m.Pb(1,"data-group"),m.Kb(2,"multi-select-input",1,2),m.Kb(4,"multi-select-input",3,2),m.Ob(),m.Pb(6,"div",4),m.Pb(7,"button",5),m.sc(8,"Send"),m.Ob(),m.Pb(9,"button",6),m.Wb("click",(function(){return t.populate()})),m.sc(10," Populate "),m.Ob(),m.Pb(11,"button",7),m.Wb("click",(function(){return t.clear()})),m.sc(12," Clear "),m.Ob(),m.Ob(),m.Ob()),2&e&&(m.bc("model",t.exampleModel)("highlightOnValid",!0),m.xb(2),m.bc("options",t.fruits),m.xb(2),m.bc("options",t.cities)("size",10))},directives:[D.a,T.a,me],encapsulation:2}),e}(),fe=function(){var e=function(){function e(){n(this,e)}return t(e,[{key:"ngOnInit",value:function(){this.htmlCode=s("fpoe").default,this.componentCode=s("8Clq").default,this.dtoCode=s("PiEg").default,this.customComponentHtml1=s("KhLG").default,this.customComponentCss1=s("toV4").default,this.customComponentTs1=s("UQne").default}}]),e}();return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=m.Db({type:e,selectors:[["demo-overview-3"]],decls:153,vars:6,consts:[["label","Demo:"],["content",""],[1,"i-btn","fas","fa-code"],["type","running-code"],["content-code",""],["label","Vanilla Select Input HTML","type","custom-component-html-1","language","html",3,"code"],["label","Vanilla Select Input CSS","type","custom-component-css-1","language","css",3,"code"],["label","Vanilla Select Input TS","type","custom-component-ts-1","language","ts",3,"code"],["type","html","language","html",3,"code"],["type","component","language","typescript",3,"code"],["type","dto","language","typescript",3,"code"],["href","https://github.com/typestack/class-validator","target","blank"]],template:function(e,t){1&e&&(m.Pb(0,"marker"),m.sc(1,"Building a vanilla multiple select"),m.Ob(),m.Pb(2,"code-example",0),m.Pb(3,"div",1),m.sc(4," Check the code "),m.Kb(5,"i",2),m.sc(6," to see more details. "),m.Ob(),m.Pb(7,"code-block",3),m.Kb(8,"running-code"),m.Ob(),m.Pb(9,"div",4),m.Pb(10,"ul"),m.Pb(11,"li"),m.sc(12," On this example, the first three tabs are the built HTML, CSS and TS for the custom component "),m.Pb(13,"code"),m.sc(14,"multi-select-input"),m.Ob(),m.sc(15,". "),m.Ob(),m.Pb(16,"li"),m.sc(17," The last three tabs are the implementation of the built custom component. "),m.Ob(),m.Ob(),m.Ob(),m.Pb(18,"code-block",5),m.Pb(19,"p"),m.sc(20," This component is very similar in HTML to the example before. The only difference is that was added the "),m.Pb(21,"code"),m.sc(22,"multiple"),m.Ob(),m.sc(23," and "),m.Pb(24,"code"),m.sc(25,"size"),m.Ob(),m.sc(26," attributes on the "),m.Pb(27,"code"),m.sc(28,"select"),m.Ob(),m.sc(29," tag. "),m.Ob(),m.Pb(30,"p"),m.sc(31," Also an important point to notice is that the "),m.Pb(32,"code"),m.sc(33,"value"),m.Ob(),m.sc(34," attribute was removed from the "),m.Pb(35,"code"),m.sc(36,"select"),m.Ob(),m.sc(37," tag because won't make sense on this component. Due to it's a multiple select, the data type that will store is an "),m.Pb(38,"code"),m.sc(39,"Array<any>"),m.Ob(),m.sc(40,". So we will need to manage this data type in a particular way to re-render the selected options inside the component's logic (TS File). "),m.Ob(),m.Ob(),m.Pb(41,"code-block",6),m.Pb(42,"p"),m.sc(43," The styles kept the same as on the "),m.Pb(44,"code"),m.sc(45,"select-input"),m.Ob(),m.sc(46," component. "),m.Ob(),m.Ob(),m.Pb(47,"code-block",7),m.Pb(48,"p"),m.sc(49,"Here we have the following implementations:"),m.Ob(),m.Pb(50,"ul"),m.Pb(51,"li"),m.Pb(52,"code"),m.sc(53,"detectPropertiesChanges"),m.Ob(),m.sc(54,": framework's method. Implemented to watch the "),m.Pb(55,"code"),m.sc(56,"@Input size"),m.Ob(),m.sc(57," property and call the method "),m.Pb(58,"code"),m.sc(59,"computeSize"),m.Ob(),m.sc(60,". "),m.Ob(),m.Ob(),m.Pb(61,"ul"),m.Pb(62,"li"),m.Pb(63,"code"),m.sc(64,"bindWatchModelEvents"),m.Ob(),m.sc(65,": framework's method. Implemented to watch the model's changes. Once a value is selected from the multiple select component, this method will be listening the model changes to trigger the "),m.Pb(66,"code"),m.sc(67,"initSelectedOptions"),m.Ob(),m.sc(68," method. "),m.Ob(),m.Ob(),m.Pb(69,"ul"),m.Pb(70,"li"),m.Pb(71,"code"),m.sc(72,"bindFocusoutEvents"),m.Ob(),m.sc(73,": framework's method. Implemented to fill and validate the model when the multiple select is focused out. Remember that it's up to you which framework's method to choose for triggering the model filling and validation. Also it could be used the "),m.Pb(74,"code"),m.sc(75,"bindChangeEvents"),m.Ob(),m.sc(76," framework's method instead of "),m.Pb(77,"code"),m.sc(78,"bindFocusoutEvents"),m.Ob(),m.sc(79,". But in this example we wanted that the validation only occurs after the selection of the options and not during the selection. "),m.Ob(),m.Ob(),m.Pb(80,"ul"),m.Pb(81,"li"),m.Pb(82,"code"),m.sc(83,"initSelectedOptions"),m.Ob(),m.sc(84,": this method was built specifically for this component. It's triggered when the model changes to highlight the selected options on the HTML. For example if the model's property "),m.Pb(85,"code"),m.sc(86,"cities"),m.Ob(),m.sc(87," has the value "),m.Pb(88,"code"),m.sc(89,"[2, 3]"),m.Ob(),m.sc(90,", the multi select component will highlight the "),m.Pb(91,"i"),m.sc(92,"Bogot\xe1"),m.Ob(),m.sc(93," and "),m.Pb(94,"i"),m.sc(95,"Lima"),m.Ob(),m.sc(96," cities. (Click on the populate button to see the example in action). Also take into account the data type. In both multi selects we are receiving an "),m.Pb(97,"code"),m.sc(98,"Array[number]"),m.Ob(),m.sc(99," data type, so it's necessary to implement the "),m.Pb(100,"code"),m.sc(101,"parseValue"),m.Ob(),m.sc(102," function to match the data types, if not, the options values will be always returned as strings. "),m.Ob(),m.Ob(),m.Pb(103,"ul"),m.Pb(104,"li"),m.Pb(105,"code"),m.sc(106,"getSelectedOptions"),m.Ob(),m.sc(107,": this method was built specifically for this component. It's the traditional way to retrieve the selected options from a multiple select using javascript. "),m.Ob(),m.Ob(),m.Pb(108,"ul"),m.Pb(109,"li"),m.Pb(110,"code"),m.sc(111,"computeSize"),m.Ob(),m.sc(112,": this method was built specifically for this component. It helps to get the vertical size of the select according to the options length. "),m.Ob(),m.Ob(),m.Ob(),m.Pb(113,"code-block",8),m.Pb(114,"p"),m.sc(115," Here is the implementation of the "),m.Pb(116,"code"),m.sc(117,"multi-select-input"),m.Ob(),m.sc(118," component. "),m.Ob(),m.Ob(),m.Pb(119,"code-block",9),m.Pb(120,"p"),m.sc(121," Again we can try the fill and clear methods to populate or reset the form. Notice how the selected options are highlighted using the "),m.Pb(122,"code"),m.sc(123,"fill"),m.Ob(),m.sc(124," method from the "),m.Pb(125,"code"),m.sc(126,"BaseModel"),m.Ob(),m.sc(127,". When running the "),m.Pb(128,"code"),m.sc(129,"fill"),m.Ob(),m.sc(130," method from the framework class, it will emit a change inside the model watcher and all the logic inside the "),m.Pb(131,"code"),m.sc(132,"bindWatchModelEvents"),m.Ob(),m.sc(133," method (implemented on the Vanilla Select Input TS) will be executed, wrapped on the "),m.Pb(134,"code"),m.sc(135,"initSelectedOptions"),m.Ob(),m.sc(136," method to highlight the selected options. The same occurs with the "),m.Pb(137,"code"),m.sc(138,"clear"),m.Ob(),m.sc(139," method. "),m.Ob(),m.Ob(),m.Pb(140,"code-block",10),m.Pb(141,"p"),m.sc(142," Finally we have our model attributes and validation rules. Notice that the "),m.Pb(143,"code"),m.sc(144,"@IsNumber"),m.Ob(),m.sc(145," decorator has as second parameter the object "),m.Pb(146,"code"),m.sc(147,"{ each: true }"),m.Ob(),m.sc(148,". It's how is declared a validation to check if it's an array of numbers. Check for more validation rules on the "),m.Pb(149,"a",11),m.Pb(150,"code"),m.sc(151,"class-validator"),m.Ob(),m.Ob(),m.sc(152," official docs. "),m.Ob(),m.Ob(),m.Ob()),2&e&&(m.xb(18),m.bc("code",t.customComponentHtml1),m.xb(23),m.bc("code",t.customComponentCss1),m.xb(6),m.bc("code",t.customComponentTs1),m.xb(66),m.bc("code",t.htmlCode),m.xb(6),m.bc("code",t.componentCode),m.xb(21),m.bc("code",t.dtoCode))},directives:[h.a,x.a,E.a,ve],encapsulation:2}),e}(),ge=((ce=function(e){o(i,e);var t=a(i);function i(){return n(this,i),t.apply(this,arguments)}return i}(b.a)).\u0275fac=function(e){return ye(e||ce)},ce.\u0275cmp=m.Db({type:ce,selectors:[["app-overview"]],features:[m.ub],decls:20,vars:0,template:function(e,t){1&e&&(m.Pb(0,"p"),m.sc(1," The "),m.Pb(2,"b"),m.sc(3,"Data Input Base"),m.Ob(),m.sc(4," is the base class to be used for extending form UI components to bind them with the NG Data Groups Framework. "),m.Ob(),m.Pb(5,"p"),m.sc(6," The following examples are ideas of how to build your custom components with this framework, to take advantage of the inherited methods from the "),m.Pb(7,"code"),m.sc(8,"DataInputBase"),m.Ob(),m.sc(9," class and the "),m.Pb(10,"code"),m.sc(11,"BaseModel"),m.Ob(),m.sc(12," and "),m.Pb(13,"code"),m.sc(14,"BaseModel"),m.Ob(),m.sc(15," array classes. "),m.Ob(),m.Kb(16,"br"),m.Kb(17,"demo-overview-1"),m.Kb(18,"demo-overview-2"),m.Kb(19,"demo-overview-3"))},directives:[H,J,fe],encapsulation:2}),ce),ye=m.Rb(ge),Oe=[{path:"",redirectTo:"overview",pathMatch:"full"},{path:"",component:P,children:[{path:"overview",component:ge},{path:"api",component:f}]}],Pe=((pe=function e(){n(this,e)}).\u0275mod=m.Hb({type:pe}),pe.\u0275inj=m.Gb({factory:function(e){return new(e||pe)},imports:[[p.d.forChild(Oe)],p.d]}),pe),we=((de=function e(){n(this,e)}).\u0275mod=m.Hb({type:de}),de.\u0275inj=m.Gb({factory:function(e){return new(e||de)},imports:[[d.a]]}),de),xe=((ue=function e(){n(this,e)}).\u0275mod=m.Hb({type:ue}),ue.\u0275inj=m.Gb({factory:function(e){return new(e||ue)},imports:[[d.a]]}),ue),Ee=((re=function e(){n(this,e)}).\u0275mod=m.Hb({type:re}),re.\u0275inj=m.Gb({factory:function(e){return new(e||re)},imports:[[d.a]]}),re),ke=((le=function e(){n(this,e)}).\u0275mod=m.Hb({type:le}),le.\u0275inj=m.Gb({factory:function(e){return new(e||le)},imports:[[u.b,d.a,Pe,we,xe,Ee]]}),le)},ymo9:function(e,t,n){"use strict";n.r(t),t.default='<data-groups [model]="exampleModel" [highlightOnValid]="true">\n  <data-group>\n    <select-input\n      #dataInput\n      label="City"\n      name="city"\n      placeholder="Select a city"\n      [options]="selectOptions"\n    ></select-input>\n  </data-group>\n  <div class="d-flex">\n    <button class="btn btn-primary">Send</button>\n    <button type="button" class="btn btn-secondary ml-3" (click)="populate()">\n      Populate\n    </button>\n    <button type="button" class="btn btn-info ml-3" (click)="clear()">\n      Clear\n    </button>\n  </div>\n</data-groups>\n'}}])}();